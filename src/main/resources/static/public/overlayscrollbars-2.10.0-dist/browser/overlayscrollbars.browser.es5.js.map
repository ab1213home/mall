{"version":3,"file":"overlayscrollbars.browser.es5.js","sources":["../../src/support/cache.ts","../../src/support/compatibility/isBrowser.ts","../../src/support/utils/alias.ts","../../src/support/compatibility/apis.ts","../../src/support/utils/types.ts","../../src/support/utils/animation.ts","../../src/support/utils/array.ts","../../src/support/utils/strings.ts","../../src/support/utils/equal.ts","../../src/support/utils/noop.ts","../../src/support/utils/function.ts","../../src/support/utils/object.ts","../../src/support/utils/math.ts","../../src/support/dom/attribute.ts","../../src/support/dom/class.ts","../../src/support/dom/traversal.ts","../../src/support/dom/manipulation.ts","../../src/support/dom/create.ts","../../src/support/dom/style.ts","../../src/support/dom/dimensions.ts","../../src/support/dom/events.ts","../../src/support/dom/scroll.ts","../../src/support/dom/focus.ts","../../src/support/eventListeners.ts","../../src/options.ts","../../src/classnames.ts","../../src/nonce.ts","../../src/environment.ts","../../src/initialization.ts","../../src/instances.ts","../../src/observers/domObserver.ts","../../src/plugins/plugins.ts","../../../../node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/extends.js","../../src/plugins/optionsValidationPlugin/validation.ts","../../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../../src/setups/structureSetup/structureSetup.utils.ts","../../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../../src/observers/sizeObserver.ts","../../src/observers/trinsicObserver.ts","../../src/setups/observersSetup/observersSetup.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../../src/setups/structureSetup/structureSetup.elements.ts","../../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../../src/setups/structureSetup/structureSetup.ts","../../src/setups/setups.ts","../../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser =\n  // deno has the global `window` defined\n  typeof window !== 'undefined' &&\n  // make sure HTML element is available\n  typeof HTMLElement !== 'undefined' &&\n  // make sure document is defined\n  !!window.document;\n","import { isBrowser } from '../compatibility/isBrowser';\n\nexport const wnd = (isBrowser ? window : {}) as typeof window;\nexport const mathMax = Math.max;\nexport const mathMin = Math.min;\nexport const mathRound = Math.round;\nexport const mathFloor = Math.floor;\nexport const mathCeil = Math.ceil;\nexport const mathAbs = Math.abs;\nexport const mathSign = Math.sign;\nexport const cAF = wnd.cancelAnimationFrame;\nexport const rAF = wnd.requestAnimationFrame;\nexport const setT = wnd.setTimeout;\nexport const clearT = wnd.clearTimeout;\n","import { wnd } from '../utils/alias';\n\nconst getApi = <T>(name: string) =>\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\n    ? wnd[name as keyof typeof wnd]\n    : undefined) as T;\n\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\nexport const IntersectionObserverConstructor =\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\n","import type { PlainObject } from '~/typings';\n\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\n\nexport const isNull = (obj: any): obj is null => obj === null;\n\nexport const type = (obj: any): string =>\n  isUndefined(obj) || isNull(obj)\n    ? `${obj}`\n    : Object.prototype.toString\n        .call(obj)\n        .replace(/^\\[object (.+)\\]$/, '$1')\n        .toLowerCase();\n\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\n\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\n\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\n\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\n\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\n\nexport const isObject = (obj: any): obj is object =>\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\n\n/**\n * Returns true if the given object is array like, false otherwise.\n * @param obj The Object\n */\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\n  const length = !!obj && obj.length;\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\n\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\n    ? length > 0 && isObject(obj)\n      ? length - 1 in obj\n      : true\n    : false;\n};\n\n/**\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\n * @param obj The Object.\n */\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> =>\n  !!obj && obj.constructor === Object;\n\n/**\n * Checks whether the given object is a HTMLElement.\n * @param obj The object which shall be checked.\n */\nexport const isHTMLElement = (obj: any): obj is HTMLElement => obj instanceof HTMLElement;\n\n/**\n * Checks whether the given object is a Element.\n * @param obj The object which shall be checked.\n */\nexport const isElement = (obj: any): obj is Element => obj instanceof Element;\n","import { mathMax, rAF, cAF } from './alias';\nimport { isFunction } from './types';\n\n/**\n * percent: current percent (0 - 1),\n * time: current time (duration * percent),\n * min: start value\n * max: end value\n * duration: duration in ms\n */\nexport type EasingFn = (\n  percent: number,\n  time: number,\n  min: number,\n  max: number,\n  duration: number\n) => number;\n\nconst animationCurrentTime = () => performance.now();\n\nexport const animateNumber = (\n  from: number,\n  to: number,\n  duration: number,\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\n  easing?: EasingFn | false\n): ((complete?: boolean) => void) => {\n  let animationFrameId = 0;\n  const timeStart = animationCurrentTime();\n  const finalDuration = mathMax(0, duration);\n  const frame = (complete?: boolean) => {\n    const timeNow = animationCurrentTime();\n    const timeElapsed = timeNow - timeStart;\n    const stopAnimation = timeElapsed >= finalDuration;\n    const percent = complete\n      ? 1\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\n    const progress =\n      (to - from) *\n        (isFunction(easing)\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\n          : percent) +\n      from;\n    const animationCompleted = stopAnimation || percent === 1;\n\n    onFrame && onFrame(progress, percent, animationCompleted);\n\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\n  };\n  frame();\n  return (complete) => {\n    cAF!(animationFrameId);\n    complete && frame(complete);\n  };\n};\n","import type { PlainObject } from '~/typings';\nimport { isArray, isArrayLike, isString } from './types';\n\ntype RunEachItem = ((...args: any) => any | any[]) | false | null | undefined;\n\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\n  array: T,\n  callback: (\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\n    index: number,\n    source: T\n  ) => boolean | unknown\n): T;\nexport function each<T extends ArrayLike<unknown>>(\n  arrayLikeObject: T,\n  callback: (\n    value: T extends ArrayLike<infer V> ? V : never,\n    index: number,\n    source: T\n  ) => boolean | unknown\n): T;\nexport function each<T extends PlainObject>(\n  obj: T,\n  callback: (value: any, key: string, source: T) => boolean | unknown\n): T;\nexport function each(\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\n  if (isArrayLike(source)) {\n    for (let i = 0; i < source.length; i++) {\n      if (callback(source[i], i, source) === false) {\n        break;\n      }\n    }\n  } else if (source) {\n    // cant use support func keys here due to circular dep\n    each(Object.keys(source), (key) => callback(source[key], key, source));\n  }\n  return source;\n}\n\n/**\n * Returns true when the passed item is in the passed array and false otherwise.\n * @param arr The array.\n * @param item The item.\n * @returns Whether the item is in the array.\n */\nexport const inArray = <T = any>(arr: T[] | readonly T[], item: T): boolean =>\n  arr.indexOf(item) >= 0;\n\n/**\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\n * @param a Array A.\n * @param b Array B.\n * @returns A new array which has the entries of both arrays.\n */\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\n\n/**\n * Pushesh all given items into the given array and returns it.\n * @param array The array the items shall be pushed into.\n * @param items The items which shall be pushed into the array.\n */\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\n    ? Array.prototype.push.apply(array, items as T[])\n    : array.push(items as T);\n  return array;\n};\n\n/**\n * Creates a shallow-copied Array instance from an array-like or iterable object.\n * @param arr The object from which the array instance shall be created.\n */\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\n\n/**\n * Creates an array if the passed value is not an array, or returns the value if it is.\n * If the passed value is an array like structure and not a string it will be converted into an array.\n * @param value The value.\n * @returns An array which represents the passed value(s).\n */\nexport const createOrKeepArray = <T>(value: T | T[] | ArrayLike<T>): T[] => {\n  if (isArray(value)) {\n    return value;\n  }\n  return !isString(value) && isArrayLike(value) ? from(value) : [value];\n};\n\n/**\n * Check whether the passed array is empty.\n * @param array The array which shall be checked.\n */\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\n\n/**\n * Deduplicates all items of the array.\n * @param array The array to be deduplicated.\n * @returns The deduplicated array.\n */\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\n\n/**\n * Calls all functions in the passed array/set of functions.\n * @param arr The array filled with function which shall be called.\n * @param args The args with which each function is called.\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\n */\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\n  // eslint-disable-next-line prefer-spread\n  const runFn = (fn: RunEachItem) => (fn ? fn.apply(undefined, args || []) : true); // return true when fn is falsy to not break the loop\n  each(arr, runFn);\n  !keep && ((arr as any[]).length = 0);\n};\n","export const strPaddingTop = 'paddingTop';\nexport const strPaddingRight = 'paddingRight';\nexport const strPaddingLeft = 'paddingLeft';\nexport const strPaddingBottom = 'paddingBottom';\nexport const strMarginLeft = 'marginLeft';\nexport const strMarginRight = 'marginRight';\nexport const strMarginBottom = 'marginBottom';\nexport const strOverflowX = 'overflowX';\nexport const strOverflowY = 'overflowY';\nexport const strWidth = 'width';\nexport const strHeight = 'height';\nexport const strVisible = 'visible';\nexport const strHidden = 'hidden';\nexport const strScroll = 'scroll';\n\nexport const capitalizeFirstLetter = (str: string | number | false | null | undefined): string => {\n  const finalStr = String(str || '');\n  return finalStr ? finalStr[0].toUpperCase() + finalStr.slice(1) : '';\n};\n","import type { WH } from '../dom/dimensions';\nimport type { XY } from '../dom/offset';\nimport type { TRBL } from '../dom/style';\nimport type { PlainObject } from '~/typings';\nimport { each } from './array';\nimport { mathRound } from './alias';\nimport { strHeight, strWidth } from './strings';\n\n/**\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\n * @param a Object a.\n * @param b Object b.\n * @param props The props which shall be compared.\n */\nexport const equal = <T extends PlainObject>(\n  a: T | undefined,\n  b: T | undefined,\n  props: Array<keyof T> | ReadonlyArray<keyof T>,\n  propMutation?: ((value: any) => any) | null | false\n): boolean => {\n  if (a && b) {\n    let result = true;\n    each(props, (prop) => {\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\n      if (compareA !== compareB) {\n        result = false;\n      }\n    });\n    return result;\n  }\n  return false;\n};\n\n/**\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\n * Also returns false if one of the objects is undefined or null.\n * @param a Object a.\n * @param b Object b.\n */\nexport const equalWH = <T>(a?: Partial<WH<T>>, b?: Partial<WH<T>>) =>\n  equal<Partial<WH<T>>>(a, b, ['w', 'h']);\n\n/**\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\n * Also returns false if one of the objects is undefined or null.\n * @param a Object a.\n * @param b Object b.\n */\nexport const equalXY = <T>(a?: Partial<XY<T>>, b?: Partial<XY<T>>) =>\n  equal<Partial<XY<T>>>(a, b, ['x', 'y']);\n\n/**\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\n * Also returns false if one of the objects is undefined or null.\n * @param a Object a.\n * @param b Object b.\n */\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\n\n/**\n * Compares two DOM Rects for their equality of their width and height properties\n * Also returns false if one of the DOM Rects is undefined or null.\n * @param a DOM Rect a.\n * @param b DOM Rect b.\n * @param round Whether the values should be rounded.\n */\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\n","export const noop = () => {}; // eslint-disable-line\n","import { isNumber, isFunction } from './types';\nimport { from } from './array';\nimport { rAF, cAF, setT, clearT } from './alias';\nimport { noop } from './noop';\n\ntype DebounceTiming = number | false | null | undefined;\n\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\n  /**\n   * The timeout for debouncing. If null, no debounce is applied.\n   */\n  _timeout?: DebounceTiming | (() => DebounceTiming);\n  /**\n   * A maximum amount of ms. before the function will be called even with debounce.\n   */\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\n  /**\n   * Defines the calling on the leading edge of the timeout.\n   */\n  _leading?: boolean;\n  /**\n   * Function which merges parameters for each canceled debounce.\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\n   */\n  _mergeParams?: (\n    prev: Parameters<FunctionToDebounce>,\n    curr: Parameters<FunctionToDebounce>\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\n}\n\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\n  _flush(): void;\n}\n\nexport const bind = <A extends any[], B extends any[], R>(\n  fn: (...args: [...A, ...B]) => R,\n  ...args: A\n): ((...args: B) => R) => fn.bind(0, ...args);\n\n/**\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\n */\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\n  let id: number;\n  const setTFn = timeout ? setT : rAF!;\n  const clearTFn = timeout ? clearT : cAF!;\n  return [\n    (callback: () => any) => {\n      clearTFn(id);\n      // @ts-ignore\n      id = setTFn(() => callback(), isFunction(timeout) ? timeout() : timeout);\n    },\n    () => clearTFn(id),\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\n};\n\n/**\n * Debounces the given function either with a timeout or a animation frame.\n * @param functionToDebounce The function which shall be debounced.\n * @param options Options for debouncing.\n */\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\n  functionToDebounce: FunctionToDebounce,\n  options?: DebounceOptions<FunctionToDebounce>\n): Debounced<FunctionToDebounce> => {\n  const { _timeout, _maxDelay, _leading, _mergeParams } = options || {};\n  let maxTimeoutId: number | undefined;\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\n  let leadingInvoked: boolean | undefined;\n  let clear = noop;\n\n  const invokeFunctionToDebounce = function (args: Parameters<FunctionToDebounce>) {\n    clear();\n    clearT(maxTimeoutId);\n    leadingInvoked = maxTimeoutId = prevArguments = undefined;\n    clear = noop;\n    // eslint-disable-next-line\n    // @ts-ignore\n    functionToDebounce.apply(this, args);\n  };\n\n  const mergeParms = (\n    curr: Parameters<FunctionToDebounce>\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\n\n  const flush = () => {\n    /* istanbul ignore next */\n    if (clear !== noop) {\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\n    }\n  };\n\n  const debouncedFn = function () {\n    // eslint-disable-next-line prefer-rest-params\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\n\n    if (hasTimeout) {\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\n      const mergeParamsResult = mergeParms(args);\n      const invokedArgs = mergeParamsResult || args;\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\n      let timeoutId: number | undefined;\n\n      // if (!mergeParamsResult) {\n      //   invokeFunctionToDebounce(prevArguments || args);\n      // }\n\n      clear();\n      if (_leading && !leadingInvoked) {\n        boundInvoke();\n        leadingInvoked = true;\n        // @ts-ignore\n        timeoutId = setTimeoutFn(() => (leadingInvoked = undefined), finalTimeout);\n      } else {\n        // @ts-ignore\n        timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\n\n        if (hasMaxWait && !maxTimeoutId) {\n          maxTimeoutId = setT(flush, finalMaxWait as number);\n        }\n      }\n\n      clear = () => clearTimeoutFn(timeoutId as number);\n\n      prevArguments = latestArguments = invokedArgs;\n    } else {\n      invokeFunctionToDebounce(args);\n    }\n  };\n  debouncedFn._flush = flush;\n\n  return debouncedFn as Debounced<FunctionToDebounce>;\n};\n","import type { PlainObject } from '~/typings';\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\nimport { each } from './array';\n\n/**\n * Determines whether the passed object has a property with the passed name.\n * @param obj The object.\n * @param prop The name of the property.\n */\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\n  Object.prototype.hasOwnProperty.call(obj, prop);\n\n/**\n * Returns the names of the enumerable string properties and methods of an object.\n * @param obj The object of which the properties shall be returned.\n */\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\n\ntype AssignDeep = {\n  <T, U>(target: T, object1: U): T & U;\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\n    U &\n    V &\n    W &\n    X &\n    Y;\n  <T, U, V, W, X, Y, Z>(\n    target: T,\n    object1?: U,\n    object2?: V,\n    object3?: W,\n    object4?: X,\n    object5?: Y,\n    object6?: Z\n  ): T & U & V & W & X & Y & Z;\n};\n\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\n  target: T,\n  object1?: U,\n  object2?: V,\n  object3?: W,\n  object4?: X,\n  object5?: Y,\n  object6?: Z\n): T & U & V & W & X & Y & Z => {\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\n\n  // Handle case when target is a string or something (possible in deep copy)\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\n    target = {} as T;\n  }\n\n  each(sources, (source) => {\n    // Extend the base object\n    each(source, (_, key) => {\n      const copy: any = source[key];\n\n      // Prevent Object.prototype pollution\n      // Prevent never-ending loop\n      if (target === copy) {\n        return true;\n      }\n\n      const copyIsArray = isArray(copy);\n\n      // Recurse if we're merging plain objects or arrays\n      if (copy && isPlainObject(copy)) {\n        const src = target[key as keyof T];\n        let clone: any = src;\n\n        // Ensure proper type for the source value\n        if (copyIsArray && !isArray(src)) {\n          clone = [];\n        } else if (!copyIsArray && !isPlainObject(src)) {\n          clone = {};\n        }\n\n        // Never move original objects, clone them\n        target[key as keyof T] = assignDeep(clone, copy) as any;\n      } else {\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\n      }\n    });\n  });\n\n  // Return the modified object\n  return target as any;\n};\n\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\n  each(assignDeep({}, target), (value, key, copy) => {\n    if (value === undefined) {\n      delete copy[key];\n    } else if (deep && value && isPlainObject(value)) {\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\n    }\n  });\n\n/**\n * Returns true if the given object is empty, false otherwise.\n * @param obj The Object.\n */\nexport const isEmptyObject = (obj: any): boolean => !keys(obj).length;\n","import { mathMax, mathMin } from './alias';\n\n/**\n * Caps the passed number between the `min` and `max` bounds.\n * @param min The min bound.\n * @param max The max bound.\n * @param number The number to be capped.\n * @returns The capped number between min and max.\n */\nexport const capNumber = (min: number, max: number, number: number) =>\n  mathMax(min, mathMin(max, number));\n","import type { HTMLElementTarget } from './types';\nimport { bind, deduplicateArray, each, from, isArray } from '../utils';\n\nexport type AttributeElementTarget = HTMLElementTarget | Element;\n\nexport type DomTokens = string | string[] | false | null | undefined | void;\n\nexport const getDomTokensArray = (tokens: DomTokens) =>\n  deduplicateArray((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token));\n\n/**\n * Gets a attribute with the given attribute of the given element.\n * @param elm The element of which the attribute shall be get.\n * @param attrName The attribute name which shall be get.\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\n */\nexport const getAttr = (elm: AttributeElementTarget, attrName: string) =>\n  elm && elm.getAttribute(attrName);\n\n/**\n * Returns whether the given attribute exists on the given element.\n * @param elm The element.\n * @param attrName The attribute.\n * @returns A Truthy value indicates a present attrubte.\n */\nexport const hasAttr = (elm: AttributeElementTarget, attrName: string) =>\n  elm && elm.hasAttribute(attrName);\n\n/**\n * Sets the given attributes to the given element.\n * @param elm The element of which the attributes shall be removed.\n * @param attrName The attribute names separated by a space.\n */\nexport const setAttrs = (\n  elm: AttributeElementTarget,\n  attrNames: string | string[],\n  value: string | number | false | null | undefined\n) => {\n  each(getDomTokensArray(attrNames), (attrName) => {\n    elm && elm.setAttribute(attrName, String(value || ''));\n  });\n};\n\n/**\n * Removes the given attributes from the given element.\n * @param elm The element of which the attribute shall be removed.\n * @param attrName The attribute names separated by a space.\n */\nexport const removeAttrs = (elm: AttributeElementTarget, attrNames: string | string[]): void => {\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\n};\n\nexport const domTokenListAttr = (elm: AttributeElementTarget, attrName: string) => {\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\n  const setElmAttr = bind(setAttrs, elm, attrName);\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\n    const initialArrSet = new Set(initialArr);\n    each(getDomTokensArray(operationTokens), (token) => {\n      initialArrSet[operation](token);\n    });\n    return from(initialArrSet).join(' ');\n  };\n\n  return {\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\n    _has: (hasTokens: DomTokens) => {\n      const tokenSet = getDomTokensArray(hasTokens);\n      return tokenSet.reduce(\n        (boolean, token) => boolean && initialArr.includes(token),\n        tokenSet.length > 0\n      );\n    },\n  };\n};\n\n/**\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\n * @param elm The element.\n * @param attrName The attributeName to which the value shall be removed.\n * @param value The value which shall be removed.\n */\nexport const removeAttrClass = (\n  elm: AttributeElementTarget,\n  attrName: string,\n  value: DomTokens\n): (() => void) => {\n  domTokenListAttr(elm, attrName)._remove(value);\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  return bind(addAttrClass, elm, attrName, value);\n};\n\n/**\n * Treats the given attribute like the \"class\" attribute and adds value to it.\n * @param elm The element.\n * @param attrName The attributeName to which the value shall be added.\n * @param value The value which shall be added.\n */\nexport const addAttrClass = (\n  elm: AttributeElementTarget,\n  attrName: string,\n  value: DomTokens\n): (() => void) => {\n  domTokenListAttr(elm, attrName)._add(value);\n  return bind(removeAttrClass, elm, attrName, value);\n};\n\nexport const addRemoveAttrClass = (\n  elm: AttributeElementTarget,\n  attrName: string,\n  value: DomTokens,\n  add?: boolean\n) => (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\n\n/**\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\n * @param elm The element.\n * @param attrName The attributeName from which the content shall be checked.\n * @param value The value.\n * @returns True if the given attribute has the value in it, false otherwise.\n */\nexport const hasAttrClass = (\n  elm: AttributeElementTarget,\n  attrName: string,\n  value: DomTokens\n): boolean => domTokenListAttr(elm, attrName)._has(value);\n","import type { AttributeElementTarget, DomTokens } from './attribute';\nimport { each, from } from '../utils/array';\nimport { bind } from '../utils/function';\nimport { domTokenListAttr } from './attribute';\n\nconst createDomTokenListClass = (elm: AttributeElementTarget) => domTokenListAttr(elm, 'class');\n\n/**\n * Check whether the given element has the given class name(s).\n * @param elm The element.\n * @param className The class name(s).\n */\nexport const hasClass = (elm: AttributeElementTarget, className: DomTokens): boolean =>\n  createDomTokenListClass(elm)._has(className);\n\n/**\n * Removes the given class name(s) from the given element.\n * @param elm The element.\n * @param className The class name(s) which shall be removed. (separated by spaces)\n */\nexport const removeClass = (elm: AttributeElementTarget, className: DomTokens): void => {\n  createDomTokenListClass(elm)._remove(className);\n};\n\n/**\n * Adds the given class name(s) to the given element.\n * @param elm The element.\n * @param className The class name(s) which shall be added. (separated by spaces)\n * @returns A function which removes the added class name(s).\n */\nexport const addClass = (elm: AttributeElementTarget, className: DomTokens): (() => void) => {\n  createDomTokenListClass(elm)._add(className);\n  return bind(removeClass, elm, className);\n};\n\n/**\n * Takes two className strings, compares them and returns the difference as array.\n * @param classNameA ClassName A.\n * @param classNameB ClassName B.\n */\nexport const diffClass = (\n  classNameA: string | false | null | undefined,\n  classNameB: string | false | null | undefined\n) => {\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\n\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\n    set.has(className) ? set.delete(className) : set.add(className);\n  });\n\n  return from(set);\n};\n","import type { NodeElementTarget } from './types';\nimport { isElement } from '../utils/types';\nimport { push, from } from '../utils/array';\n\n/**\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\n * @param selector The selector which has to be searched by.\n * @param elm The element from which the search shall be outgoing.\n */\nexport const find = (selector: string, elm?: NodeElementTarget): Element[] => {\n  const rootElm = elm ? isElement(elm) && elm : document;\n  return rootElm ? from(rootElm.querySelectorAll(selector)) : [];\n};\n\n/**\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\n * @param selector The selector which has to be searched by.\n * @param elm The element from which the search shall be outgoing.\n */\nexport const findFirst = (selector: string, elm?: NodeElementTarget): NodeElementTarget => {\n  const rootElm = elm ? isElement(elm) && elm : document;\n  return rootElm && rootElm.querySelector(selector);\n};\n\n/**\n * Determines whether the passed element is matching with the passed selector.\n * @param elm The element which has to be compared with the passed selector.\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\n */\nexport const is = (elm: NodeElementTarget, selector: string): boolean =>\n  isElement(elm) && elm.matches(selector);\n\nexport const isBodyElement = (elm: NodeElementTarget) => is(elm, 'body'); // don't do targetElement === ownerDocument.body in case initialization happens in memory\n\n/**\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\n * @param elm The element of which the children shall be returned.\n * @param selector The selector which must match with the children elements.\n */\nexport const children = (elm: NodeElementTarget, selector?: string): ReadonlyArray<Element> => {\n  const childs: Array<Element> = [];\n\n  return isElement(elm)\n    ? push(\n        childs,\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\n      )\n    : childs;\n};\n\n/**\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\n * @param elm The element of which the childNodes shall be returned.\n */\nexport const contents = (elm: NodeElementTarget): ReadonlyArray<ChildNode> =>\n  elm ? from(elm.childNodes) : [];\n\n/**\n * Returns the parent element of the passed element, or null if the passed element is null.\n * @param elm The element of which the parent element shall be returned.\n */\nexport const parent = (elm: NodeElementTarget): NodeElementTarget => elm && elm.parentElement;\n\n/**\n * Returns the closest element to the passed element which matches the given selector.\n * @param elm The element.\n * @param selector The selector.\n * @returns The closest element to the passed element which matches the given selector.\n */\nexport const closest = (elm: NodeElementTarget, selector: string): NodeElementTarget =>\n  isElement(elm) && elm.closest(selector);\n\n/**\n * Gets the focused element of the passed or default document.\n * @returns The focused element of the passed document.\n */\nexport const getFocusedElement = (doc?: Document) => (doc || document).activeElement;\n\n/**\n * Determines whether the given element lies between two selectors in the DOM.\n * @param elm The element.\n * @param highBoundarySelector The high boundary selector.\n * @param deepBoundarySelector The deep boundary selector.\n */\nexport const liesBetween = (\n  elm: NodeElementTarget,\n  highBoundarySelector: string,\n  deepBoundarySelector: string\n): boolean => {\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\n  const deepBoundaryIsValid =\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\n\n  return closestHighBoundaryElm && closestDeepBoundaryElm\n    ? closestHighBoundaryElm === elm ||\n        closestDeepBoundaryElm === elm ||\n        (deepBoundaryIsValid &&\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\n            closestHighBoundaryElm)\n    : false;\n};\n","import type { NodeElementTarget, NodeElementTargetCollection } from './types';\nimport { createOrKeepArray, each } from '../utils/array';\nimport { parent } from './traversal';\nimport { bind } from '../utils';\n\n/**\n * Removes the given Nodes from their parent.\n * @param nodes The Nodes which shall be removed.\n */\nexport const removeElements = (nodes: NodeElementTargetCollection): void => {\n  each(createOrKeepArray(nodes), (node) => {\n    const parentElm = parent(node);\n    node && parentElm && parentElm.removeChild(node);\n  });\n};\n\n/**\n * Appends the given children at the end of the given Node.\n * @param node The Node to which the children shall be appended.\n * @param children The Nodes which shall be appended.\n * @returns A function which removes the inserted nodes.\n */\nexport const appendChildren = (node: NodeElementTarget, children: NodeElementTargetCollection) =>\n  bind(\n    removeElements,\n    node &&\n      children &&\n      each(createOrKeepArray(children), (child) => {\n        child && node.appendChild(child);\n      })\n  );\n","import { each } from '../utils/array';\nimport { setAttrs } from './attribute';\nimport { contents } from './traversal';\nimport { removeElements } from './manipulation';\n\n/**\n * Creates a div DOM node.\n */\nexport const createDiv = (classNames?: string): HTMLDivElement => {\n  const div = document.createElement('div');\n  setAttrs(div, 'class', classNames);\n  return div;\n};\n\n/**\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\n * @param html The html string after which the DOM nodes shall be created.\n */\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\n  const createdDiv = createDiv();\n  createdDiv.innerHTML = html.trim();\n\n  return each(contents(createdDiv), (elm) => removeElements(elm));\n};\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\nimport type { XY } from './offset';\nimport type { HTMLElementTarget } from './types';\nimport { wnd } from '../utils/alias';\nimport { each, from } from '../utils/array';\nimport { isString, isNumber, isObject, isNull, isBoolean } from '../utils/types';\n\nexport interface TRBL {\n  t: number;\n  r: number;\n  b: number;\n  l: number;\n}\n\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\n\nconst validFiniteNumber = (number: number) => {\n  const notNaN = number || 0;\n  return isFinite(notNaN) ? notNaN : 0;\n};\n\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\n\nexport const roundCssNumber = (value: number) => Math.round(value * 10000) / 10000;\n\nexport const ratioToCssPercent = (ratio: number) =>\n  `${roundCssNumber(validFiniteNumber(ratio) * 100)}%`;\n\nexport const numberToCssPx = (number: number) => `${roundCssNumber(validFiniteNumber(number))}px`;\n\nexport function setStyles(\n  elm: HTMLElementTarget,\n  styles: StyleObject | false | null | undefined\n): void {\n  elm &&\n    styles &&\n    each(styles, (rawValue: StyleObjectValue, name) => {\n      try {\n        const elmStyle = elm.style;\n        const value =\n          isNull(rawValue) || isBoolean(rawValue)\n            ? ''\n            : isNumber(rawValue)\n            ? numberToCssPx(rawValue)\n            : rawValue;\n\n        if (name.indexOf('--') === 0) {\n          elmStyle.setProperty(name, value);\n        } else {\n          elmStyle[name as any] = value;\n        }\n      } catch {}\n    });\n}\n\nexport function getStyles(\n  elm: HTMLElementTarget,\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey>,\n  pseudoElm?: string | null | undefined\n): Partial<Record<StyleObjectKey, string>>;\nexport function getStyles(\n  elm: HTMLElementTarget,\n  styles: StyleObjectKey,\n  pseudoElm?: string | null | undefined\n): string;\nexport function getStyles(\n  elm: HTMLElementTarget,\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey> | StyleObjectKey,\n  pseudoElm?: string | null | undefined\n): Partial<Record<StyleObjectKey, string>> | string {\n  const getSingleStyle = isString(styles);\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\n\n  if (elm) {\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\n    getStylesResult = getSingleStyle\n      ? getCSSVal(computedStyle, styles)\n      : from(styles).reduce((result, key) => {\n          result[key] = getCSSVal(computedStyle, key);\n          return result;\n        }, getStylesResult as PlainObject);\n  }\n  return getStylesResult;\n}\n\n/**\n * Returns the top right bottom left values of the passed css property.\n * @param elm The element of which the values shall be returned.\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\n * @param propertySuffix The css property suffix. (e.g. \"width\")\n */\nexport const topRightBottomLeft = (\n  elm?: HTMLElementTarget,\n  propertyPrefix?: string,\n  propertySuffix?: string\n): TRBL => {\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\n  const result = getStyles(elm, [top, right, bottom, left]);\n  return {\n    t: parseToZeroOrNumber(result[top]),\n    r: parseToZeroOrNumber(result[right]),\n    b: parseToZeroOrNumber(result[bottom]),\n    l: parseToZeroOrNumber(result[left]),\n  };\n};\n\nexport const getTrasformTranslateValue = (\n  value: string | number | XY<string | number>,\n  isHorizontal?: boolean\n) =>\n  `translate${\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\n  }`;\n","import type { HTMLElementTarget } from './types';\nimport { getStyles } from './style';\nimport { mathRound, wnd } from '../utils/alias';\nimport { bind } from '../utils/function';\nimport { strHeight, strWidth } from '../utils/strings';\n\nexport interface WH<T = number> {\n  w: T;\n  h: T;\n}\n\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\nconst zeroObj: WH = {\n  w: 0,\n  h: 0,\n};\n\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\n  elm: E | false | null | undefined\n): Readonly<WH> =>\n  elm\n    ? {\n        w: (elm as any)[`${property}Width`],\n        h: (elm as any)[`${property}Height`],\n      }\n    : zeroObj;\n\n/**\n * Returns the window inner- width and height.\n */\nexport const getWindowSize = (customWnd?: Window): Readonly<WH> =>\n  getElmWidthHeightProperty('inner', customWnd || wnd);\n\n/**\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the scroll- width and height shall be returned.\n */\nexport const getOffsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\n  elm: HTMLElementTarget\n) => Readonly<WH>;\n\n/**\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the client- width and height shall be returned.\n */\nexport const getClientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\n  elm: HTMLElementTarget\n) => Readonly<WH>;\n\n/**\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the client- width and height shall be returned.\n */\nexport const getScrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\n  elm: HTMLElementTarget\n) => Readonly<WH>;\n\n/**\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\n * @param elm The element of which the fractional- width and height shall be returned.\n */\nexport const getFractionalSize = (elm: HTMLElementTarget): Readonly<WH> => {\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\n  return {\n    w: cssWidth - mathRound(cssWidth),\n    h: cssHeight - mathRound(cssHeight),\n  };\n};\n\n/**\n * Returns the BoundingClientRect of the passed element.\n * @param elm The element of which the BoundingClientRect shall be returned.\n */\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\n\n/**\n * Determines whether the passed element has any dimensions.\n * @param elm The element.\n */\nexport const hasDimensions = (elm: HTMLElementTarget): boolean =>\n  !!elm && elementHasDimensions(elm);\n\n/**\n * Determines whether the passed DOM Rect has any dimensions.\n */\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\n  !!(rect && (rect[strHeight] || rect[strWidth]));\n\n/**\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\n * @param currContentRect The current DOM Rect.\n * @param prevContentRect The previous DOM Rect.\n * @returns Whether the dom rect appeared.\n */\nexport const domRectAppeared = (\n  currContentRect: DOMRectReadOnly | false | null | undefined,\n  prevContentRect: DOMRectReadOnly | false | null | undefined\n) => {\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\n  return !rectHadDimensions && rectHasDimensions;\n};\n","import type { DomTokens } from './attribute';\nimport { each, runEachAndClear } from '../utils/array';\nimport { bind } from '../utils/function';\nimport { keys } from '../utils';\nimport { getDomTokensArray } from './attribute';\n\nexport interface EventListenerOptions {\n  _capture?: boolean;\n  _passive?: boolean;\n  _once?: boolean;\n}\n\nexport type EventListenerTarget = EventTarget | false | null | undefined;\n\nexport type EventListenerMap = {\n  [eventNames: string]: ((event: any) => any) | false | null | undefined;\n};\n\n/**\n * Removes the passed event listener for the passed event names with the passed options.\n * @param target The element from which the listener shall be removed.\n * @param eventNames The eventsnames for which the listener shall be removed.\n * @param listener The listener which shall be removed.\n * @param capture The options of the removed listener.\n */\nexport const removeEventListener = <T extends Event = Event>(\n  target: EventListenerTarget,\n  eventNames: DomTokens,\n  listener: (event: T) => any,\n  capture?: boolean\n): void => {\n  each(getDomTokensArray(eventNames), (eventName) => {\n    target && target.removeEventListener(eventName, listener as EventListener, capture);\n  });\n};\n\n/**\n * Adds the passed event listener for the passed event names with the passed options.\n * @param target The element to which the listener shall be added.\n * @param eventNames The eventsnames for which the listener shall be called.\n * @param listener The listener which is called on the eventnames.\n * @param options The options of the added listener.\n */\nexport const addEventListener = <T extends Event = Event>(\n  target: EventListenerTarget,\n  eventNames: DomTokens,\n  listener: ((event: T) => any) | false | null | undefined,\n  options?: EventListenerOptions\n): (() => void) => {\n  const passive = (options && options._passive) ?? true;\n  const capture = (options && options._capture) || false;\n  const once = (options && options._once) || false;\n  const nativeOptions: AddEventListenerOptions = {\n    passive,\n    capture,\n  };\n\n  return bind(\n    runEachAndClear,\n    getDomTokensArray(eventNames).map((eventName) => {\n      const finalListener = (\n        once\n          ? (evt: T) => {\n              removeEventListener(target, eventName, finalListener, capture);\n              listener && listener(evt);\n            }\n          : listener\n      ) as EventListener;\n\n      target && target.addEventListener(eventName, finalListener, nativeOptions);\n      return bind(removeEventListener, target, eventName, finalListener, capture);\n    })\n  );\n};\n\n/**\n * Adds the passed event listeners for the passed event names with the passed options.\n * @param target The element to which the listener shall be added.\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\n * @param options The options of the added listeners.\n */\nexport const addEventListeners = (\n  target: EventListenerTarget,\n  eventListenerMap: EventListenerMap,\n  options?: EventListenerOptions\n): (() => void) =>\n  bind(\n    runEachAndClear,\n    keys(eventListenerMap).map((eventNames) =>\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\n    )\n  );\n\n/**\n * Shorthand for the stopPropagation event Method.\n * @param evt The event of which the stopPropagation method shall be called.\n */\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\n\n/**\n * Shorthand for the preventDefault event Method.\n * @param evt The event of which the preventDefault method shall be called.\n */\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\n\n/**\n * Shorthand for the stopPropagation and preventDefault event Method.\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\n */\nexport const stopAndPrevent = (evt: Event): void =>\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\n","import type { XY } from './offset';\nimport type { WH } from './dimensions';\nimport { capNumber, isNumber, mathAbs, mathSign } from '../utils';\n\nexport interface ScrollCoordinates {\n  /** The start (origin) scroll coordinates for each axis. */\n  _start: XY<number>;\n  /** The end scroll coordinates for each axis. */\n  _end: XY<number>;\n}\n\n/**\n * Scroll the passed element to the passed position.\n * @param elm The element to be scrolled.\n * @param position The scroll position.\n */\nexport const scrollElementTo = (\n  elm: HTMLElement,\n  position: Partial<XY<number | false | null | undefined>> | number | false | null | undefined\n): void => {\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\n  isNumber(x) && (elm.scrollLeft = x);\n  isNumber(y) && (elm.scrollTop = y);\n};\n\n/**\n * Scroll the passed element to the passed position.\n * @param elm The element to be scrolled.\n * @param position The scroll position.\n */\nexport const getElementScroll = (elm: HTMLElement): Readonly<XY> => ({\n  x: elm.scrollLeft,\n  y: elm.scrollTop,\n});\n\n/**\n * Scroll Coordinates which are 0.\n */\nexport const getZeroScrollCoordinates = (): ScrollCoordinates => ({\n  _start: { x: 0, y: 0 },\n  _end: { x: 0, y: 0 },\n});\n\n/**\n * Sanatizes raw scroll coordinates.\n * The passed `overflowAmount` is used as the \"max\" value for each axis if the sign of the raw max value is not `0`.\n * Makes sure that each axis has `0` either in the start or end coordinates.\n * @param rawScrollCoordinates The raw scroll coordinates.\n * @param overflowAmount The overflow amount.\n * @returns\n */\nexport const sanitizeScrollCoordinates = (\n  rawScrollCoordinates: ScrollCoordinates,\n  overflowAmount: WH<number>\n) => {\n  const { _start, _end } = rawScrollCoordinates;\n  const { w, h } = overflowAmount;\n  const sanitizeAxis = (start: number, end: number, amount: number) => {\n    let newStart = mathSign(start) * amount;\n    let newEnd = mathSign(end) * amount;\n\n    if (newStart === newEnd) {\n      const startAbs = mathAbs(start);\n      const endAbs = mathAbs(end);\n\n      newEnd = startAbs > endAbs ? 0 : newEnd;\n      newStart = startAbs < endAbs ? 0 : newStart;\n    }\n\n    // in doubt set start to 0\n    newStart = newStart === newEnd ? 0 : newStart;\n\n    return [newStart + 0, newEnd + 0] as const; // \"+ 0\" prevents \"-0\" to be in the result\n  };\n\n  const [startX, endX] = sanitizeAxis(_start.x, _end.x, w);\n  const [startY, endY] = sanitizeAxis(_start.y, _end.y, h);\n\n  return {\n    _start: {\n      x: startX,\n      y: startY,\n    },\n    _end: {\n      x: endX,\n      y: endY,\n    },\n  };\n};\n\n/**\n * Returns whether the passed scroll coordinates represent the browsers default scroll direction.\n * For the default scroll direction the following must be true:\n * 1. Start value is `0`.\n * 2. End value <= Start value.\n * @param scrollCoordinates The scroll coordinates.\n */\nexport const isDefaultDirectionScrollCoordinates = ({\n  _start,\n  _end,\n}: ScrollCoordinates): XY<boolean> => {\n  const getAxis = (start: number, end: number) => start === 0 && start <= end;\n\n  return {\n    x: getAxis(_start.x, _end.x),\n    y: getAxis(_start.y, _end.y),\n  };\n};\n\n/**\n * Gets the current scroll percent between 0..1 for each axis.\n * @param scrollCoordinates The scroll coordinates.\n * @param currentScroll The current scroll position of the element.\n */\nexport const getScrollCoordinatesPercent = (\n  { _start, _end }: ScrollCoordinates,\n  currentScroll: XY<number>\n) => {\n  const getAxis = (start: number, end: number, current: number) =>\n    capNumber(0, 1, (start - current) / (start - end) || 0);\n\n  return {\n    x: getAxis(_start.x, _end.x, currentScroll.x),\n    y: getAxis(_start.y, _end.y, currentScroll.y),\n  };\n};\n\n/**\n * Gets the scroll position of the given percent.\n * @param scrollCoordinates The scroll coordinates.\n * @param percent The percentage of the scroll.\n */\nexport const getScrollCoordinatesPosition = (\n  { _start, _end }: ScrollCoordinates,\n  percent: XY<number>\n) => {\n  const getAxis = (start: number, end: number, p: number) => start + (end - start) * p;\n\n  return {\n    x: getAxis(_start.x, _end.x, percent.x),\n    y: getAxis(_start.y, _end.y, percent.y),\n  };\n};\n","import type { NodeElementTarget } from './types';\n\nexport const focusElement = (element: NodeElementTarget) => {\n  if (element && (element as HTMLElement).focus) {\n    (element as HTMLElement).focus({ preventScroll: true });\n  }\n};\n","import { isBoolean, isFunction, isString } from './utils/types';\nimport { keys } from './utils/object';\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\nimport { bind } from './utils/function';\n\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\n  ...args: EventArgs[N]\n) => void;\n\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\n};\n\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\n  <N extends keyof EventArgs>(\n    name?: N,\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\n  ): void;\n};\n\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\n  <N extends keyof EventArgs>(\n    nameOrEventListeners: N | EventListeners<EventArgs>,\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\n  ): () => void;\n};\n\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\n};\n\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\n  AddEvent<EventArgs>,\n  RemoveEvent<EventArgs>,\n  TriggerEvent<EventArgs>\n];\n\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\n  callback: (listener?: EventListener<EventArgs, N>) => void,\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\n) => {\n  each(createOrKeepArray(listener), callback);\n};\n\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\n  initialEventListeners?: EventListeners<EventArgs>\n): EventListenerHub<EventArgs> => {\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\n\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\n    if (name) {\n      const eventSet = events.get(name);\n      manageListener((currListener) => {\n        if (eventSet) {\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\n        }\n      }, listener);\n    } else {\n      events.forEach((eventSet) => {\n        eventSet.clear();\n      });\n      events.clear();\n    }\n  };\n\n  const addEvent: AddEvent<EventArgs> = (\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\n    listenerOrPure?:\n      | EventListener<EventArgs, keyof EventArgs>\n      | EventListener<EventArgs, keyof EventArgs>[]\n      | boolean\n  ) => {\n    if (isString(nameOrEventListeners)) {\n      const eventSet = events.get(nameOrEventListeners) || new Set();\n      events.set(nameOrEventListeners, eventSet);\n\n      manageListener((currListener) => {\n        isFunction(currListener) && eventSet.add(currListener);\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\n\n      return bind(\n        removeEvent,\n        nameOrEventListeners,\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\n      );\n    }\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\n      removeEvent();\n    }\n\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\n    const offFns: (() => void)[] = [];\n    each(eventListenerKeys, (key) => {\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\n      eventListener && push(offFns, addEvent(key, eventListener));\n    });\n\n    return bind(runEachAndClear, offFns);\n  };\n\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\n    each(from(events.get(name)), (event) => {\n      if (args && !isEmptyArray(args)) {\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\n      } else {\n        (event as () => void)();\n      }\n    });\n  };\n\n  addEvent(initialEventListeners || {});\n\n  return [addEvent, removeEvent, triggerEvent];\n};\n","import {\n  assignDeep,\n  each,\n  isObject,\n  keys,\n  isArray,\n  hasOwnProperty,\n  isFunction,\n  isEmptyObject,\n  concat,\n} from '~/support';\nimport type { DeepPartial, DeepReadonly } from '~/typings';\n\nexport type OptionsField = string;\n\nexport type OptionsPrimitiveValue =\n  | boolean\n  | number\n  | string\n  | Array<any>\n  | ReadonlyArray<any>\n  | [any]\n  | [any, ...any[]]\n  | ((this: any, ...args: any[]) => any)\n  | null;\n\nexport type OptionsObject = {\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\n};\n\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\n  ? []\n  : {\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\n    }[Extract<keyof T, OptionsField>];\n\ntype JoinOptionsObjectFieldTuples<\n  T extends OptionsField[],\n  IncompletePath extends boolean = false\n> = T extends [infer F]\n  ? F\n  : T extends [infer F, ...infer R]\n  ? F extends OptionsField\n    ?\n        | (IncompletePath extends true ? F : never)\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\n    : never\n  : OptionsField;\n\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\n  ? OptionsField[]\n  : S extends ''\n  ? []\n  : S extends `${infer T}.${infer U}`\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\n  : [S];\n\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\n  ? F extends keyof O\n    ? O[F]\n    : never\n  : T extends [infer F, ...infer R]\n  ? F extends keyof O\n    ? O[F] extends OptionsPrimitiveValue\n      ? O[F]\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\n    : never\n  : never;\n\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\n  OptionsObjectFieldNameTuples<O>,\n  true\n>;\n\ntype OptionsObjectFieldPathType<\n  O extends OptionsObject,\n  P extends string\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\n\nconst opsStringify = (value: any) =>\n  JSON.stringify(value, (_, val) => {\n    if (isFunction(val)) {\n      throw 0;\n    }\n    return val;\n  });\n\nconst getPropByPath = <T>(obj: any, path: string): T =>\n  obj\n    ? `${path}`\n        .split('.')\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\n    : undefined;\n\n/**\n * The overflow behavior of an axis.\n */\nexport type OverflowBehavior =\n  /** No scrolling is possible and the content is clipped. */\n  | 'hidden'\n  /** No scrolling is possible and the content isn't clipped. */\n  | 'visible'\n  /** Scrolling is possible if there is an overflow. */\n  | 'scroll'\n  /**\n   * If the other axis has no overflow the behavior is similar to `visible`.\n   * If the other axis has overflow the behavior is similar to `hidden`.\n   */\n  | 'visible-hidden'\n  /**\n   * If the other axis has no overflow the behavior is similar to `visible`.\n   * If the other axis has overflow the behavior is similar to `scroll`.\n   */\n  | 'visible-scroll';\n\n/**\n * The scrollbars visibility behavior.\n */\nexport type ScrollbarsVisibilityBehavior =\n  /** The scrollbars are always visible. */\n  | 'visible'\n  /** The scrollbars are always hidden. */\n  | 'hidden'\n  /** The scrollbars are only visibile if there is overflow. */\n  | 'auto';\n\n/**\n * The scrollbars auto hide behavior\n */\nexport type ScrollbarsAutoHideBehavior =\n  /** The scrollbars are never hidden automatically. */\n  | 'never'\n  /** The scrollbars are hidden unless the user scrolls. */\n  | 'scroll'\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\n  | 'move'\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\n  | 'leave';\n\n/**\n * The scrollbar click scroll behavior.\n */\nexport type ScrollbarsClickScrollBehavior = boolean | 'instant';\n\n/**\n * The options of a OverlayScrollbars instance.\n */\nexport type Options = {\n  /** Whether the padding shall be absolute. */\n  paddingAbsolute: boolean;\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\n  showNativeOverlaidScrollbars: boolean;\n  /** Customizes the automatic update behavior. */\n  update: {\n    /**\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\n     */\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\n    /**\n     * The debounce which is used to detect content changes.\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\n     * If a single number customizes only the `timeout`.\n     *\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\n     */\n    debounce: [timeout: number, maxWait: number] | number | null;\n    /**\n     * HTML attributes which will trigger an update if they're changed.\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\n     */\n    attributes: string[] | null;\n    /**\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\n     * @param mutation The MutationRecord from the MutationObserver.\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\n     */\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\n  };\n  /** Customizes the overflow behavior per axis. */\n  overflow: {\n    /** The overflow behavior of the horizontal (x) axis. */\n    x: OverflowBehavior;\n    /** The overflow behavior of the vertical (y) axis. */\n    y: OverflowBehavior;\n  };\n  /** Customizes appearance of the scrollbars. */\n  scrollbars: {\n    /**\n     * The scrollbars theme.\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\n     */\n    theme: string | null;\n    /** The scrollbars visibility behavior. */\n    visibility: ScrollbarsVisibilityBehavior;\n    /** The scrollbars auto hide behavior. */\n    autoHide: ScrollbarsAutoHideBehavior;\n    /** The scrollbars auto hide delay in milliseconds. */\n    autoHideDelay: number;\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\n    autoHideSuspend: boolean;\n    /** Whether it is possible to drag the handle of a scrollbar to scroll the viewport. */\n    dragScroll: boolean;\n    /** Whether it is possible to click the track of a scrollbar to scroll the viewport. */\n    clickScroll: ScrollbarsClickScrollBehavior;\n    /**\n     * An array of pointer types which shall be supported.\n     * Common pointer types are: `mouse`, `pen` and `touch`.\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */\n    pointers: string[] | null;\n  };\n};\n\nexport type ReadonlyOptions = DeepReadonly<Options>;\n\nexport type PartialOptions = DeepPartial<Options>;\n\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\n  path: P\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\n\nexport const defaultOptions: ReadonlyOptions = {\n  paddingAbsolute: false,\n  showNativeOverlaidScrollbars: false,\n  update: {\n    elementEvents: [['img', 'load']],\n    debounce: [0, 33],\n    attributes: null,\n    ignoreMutation: null,\n  },\n  overflow: {\n    x: 'scroll',\n    y: 'scroll',\n  },\n  scrollbars: {\n    theme: 'os-theme-dark',\n    visibility: 'auto',\n    autoHide: 'never',\n    autoHideDelay: 1300,\n    autoHideSuspend: false,\n    dragScroll: true,\n    clickScroll: false,\n    pointers: ['mouse', 'touch', 'pen'],\n  },\n} satisfies OptionsObject & Options;\n\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\n  const diff: DeepPartial<T> = {};\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\n    keyof T & keyof DeepPartial<T>\n  >;\n\n  each(optionsKeys, (optionKey) => {\n    const currOptionValue = currOptions[optionKey];\n    const newOptionValue = newOptions[optionKey];\n\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\n      // delete empty nested objects\n      if (isEmptyObject(diff[optionKey])) {\n        delete diff[optionKey];\n      }\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\n      let isDiff = true;\n\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\n        try {\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\n            isDiff = false;\n          }\n        } catch {}\n      }\n\n      if (isDiff) {\n        // @ts-ignore\n        diff[optionKey] = newOptionValue;\n      }\n    }\n  });\n\n  return diff;\n};\n\nexport const createOptionCheck =\n  <T extends OptionsObject>(\n    options: T,\n    changedOptions: DeepPartial<T>,\n    force?: boolean\n  ): OptionsCheckFn<T> =>\n  (path) =>\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\n","import { strOverflowX, strOverflowY } from './support';\n\nconst dataAttributePrefix = `data-overlayscrollbars`;\n\n// environment\nexport const classNameEnvironment = 'os-environment';\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\n\n// initialize\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\n\n// shared\nexport const dataValueNoClipping = 'noClipping';\n\n// body\nexport const dataAttributeHtmlBody = `${dataAttributePrefix}-body`;\n\n// host\nexport const dataAttributeHost = dataAttributePrefix;\nexport const dataValueHostIsHost = 'host';\n\n// viewport\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\nexport const dataValueViewportOverflowXPrefix = strOverflowX;\nexport const dataValueViewportOverflowYPrefix = strOverflowY;\nexport const dataValueViewportArrange = 'arrange';\nexport const dataValueViewportMeasuring = 'measuring';\nexport const dataValueViewportScrolling = 'scrolling';\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\nexport const dataValueViewportNoContent = 'noContent';\n\n// padding\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\n\n// content\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\n\n// size observer\nexport const classNameSizeObserver = 'os-size-observer';\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\n\n// trinsic observer\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\n\n// scrollbars\nexport const classNameScrollbarThemeNone = 'os-theme-none';\nexport const classNameScrollbar = 'os-scrollbar';\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\n","let nonce: string | undefined;\n\nexport const getNonce = () => nonce;\nexport const setNonce = (newNonce: string | undefined) => {\n  nonce = newNonce;\n};\n","import {\n  createDOM,\n  addClass,\n  appendChildren,\n  getFractionalSize,\n  getClientSize,\n  getOffsetSize,\n  removeAttrs,\n  removeElements,\n  assignDeep,\n  createCache,\n  equalXY,\n  createEventListenerHub,\n  scrollT,\n  bind,\n  wnd,\n  getStyles,\n  isBodyElement,\n  isFunction,\n  addEventListener,\n} from '~/support';\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from '~/classnames';\nimport { defaultOptions } from '~/options';\nimport type { XY, EventListener } from '~/support';\nimport type { Options, PartialOptions } from '~/options';\nimport type { Initialization, PartialInitialization } from '~/initialization';\nimport type { StyleObjectKey } from './typings';\nimport { getNonce } from './nonce';\n\ntype EnvironmentEventArgs = {\n  r: [scrollbarSizeChanged?: boolean];\n};\n\nexport interface Env {\n  readonly _nativeScrollbarsSize: XY;\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\n  readonly _nativeScrollbarsHiding: boolean;\n  readonly _scrollTimeline: boolean;\n  readonly _staticDefaultInitialization: Initialization;\n  readonly _staticDefaultOptions: Options;\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\n  _getDefaultInitialization(): Initialization;\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\n  _getDefaultOptions(): Options;\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\n}\n\nlet environmentInstance: Env;\n\nconst createEnvironment = (): Env => {\n  const getNativeScrollbarSize = (\n    measureElm: HTMLElement,\n    measureElmChild: HTMLElement,\n    clear?: boolean\n  ): XY => {\n    // fix weird safari issue where getComputedStyle returns all empty styles by appending twice\n    appendChildren(document.body, measureElm);\n    appendChildren(document.body, measureElm);\n\n    const cSize = getClientSize(measureElm);\n    const oSize = getOffsetSize(measureElm);\n    const fSize = getFractionalSize(measureElmChild);\n\n    clear && removeElements(measureElm);\n\n    return {\n      x: oSize.h - cSize.h + fSize.h,\n      y: oSize.w - cSize.w + fSize.w,\n    };\n  };\n\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\n    let result = false;\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\n    try {\n      result =\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\n    } catch {}\n    revertClass();\n    return result;\n  };\n\n  // changes to this styles need to be reflected in the \"hide native scrollbars\" section of the structure styles\n  const envStyle = `.${classNameEnvironment}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${classNameEnvironment} div{width:200%;height:200%;margin:10px 0}.${classNameEnvironmentScrollbarHidden}{scrollbar-width:none!important}.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar,.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\n  const envDOM = createDOM(\n    `<div class=\"${classNameEnvironment}\"><div></div><style>${envStyle}</style></div>`\n  );\n  const envElm = envDOM[0] as HTMLElement;\n  const envChildElm = envElm.firstChild as HTMLElement;\n  const styleElm = envElm.lastChild as HTMLStyleElement;\n  const nonce = getNonce();\n\n  if (nonce) {\n    styleElm.nonce = nonce;\n  }\n\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\n    {\n      _initialValue: getNativeScrollbarSize(envElm, envChildElm),\n      _equal: equalXY,\n    },\n    bind(getNativeScrollbarSize, envElm, envChildElm, true)\n  );\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\n  const nativeScrollbarsOverlaid = {\n    x: nativeScrollbarsSize.x === 0,\n    y: nativeScrollbarsSize.y === 0,\n  };\n  const staticDefaultInitialization: Initialization = {\n    elements: {\n      host: null,\n      padding: !nativeScrollbarsHiding,\n      viewport: (target) => nativeScrollbarsHiding && isBodyElement(target) && target,\n      content: false,\n    },\n    scrollbars: {\n      slot: true,\n    },\n    cancel: {\n      nativeScrollbarsOverlaid: false,\n      body: null,\n    },\n  };\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\n  const getDefaultOptions = bind(\n    assignDeep as typeof assignDeep<Options, Options>,\n    {} as Options,\n    staticDefaultOptions\n  );\n  const getDefaultInitialization = bind(\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\n    {} as Initialization,\n    staticDefaultInitialization\n  );\n\n  const env: Env = {\n    _nativeScrollbarsSize: nativeScrollbarsSize,\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\n    _scrollTimeline: !!scrollT,\n    _addResizeListener: bind(addEvent, 'r'),\n    _getDefaultInitialization: getDefaultInitialization,\n    _setDefaultInitialization: (newInitializationStrategy) =>\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\n      getDefaultInitialization(),\n    _getDefaultOptions: getDefaultOptions,\n    _setDefaultOptions: (newDefaultOptions) =>\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\n  };\n\n  removeAttrs(envElm, 'style');\n  removeElements(envElm);\n\n  // needed in case content has css viewport units\n  addEventListener(wnd, 'resize', () => {\n    triggerEvent('r', []);\n  });\n\n  if (\n    isFunction(wnd.matchMedia) &&\n    !nativeScrollbarsHiding &&\n    (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)\n  ) {\n    const addZoomListener = (onZoom: () => void) => {\n      const media = wnd.matchMedia(`(resolution: ${wnd.devicePixelRatio}dppx)`);\n      addEventListener(\n        media,\n        'change',\n        () => {\n          onZoom();\n          addZoomListener(onZoom);\n        },\n        {\n          _once: true,\n        }\n      );\n    };\n    addZoomListener(() => {\n      const [updatedNativeScrollbarSize, nativeScrollbarSizeChanged] =\n        updateNativeScrollbarSizeCache();\n\n      assignDeep(env._nativeScrollbarsSize, updatedNativeScrollbarSize); // keep the object and just re-assign!\n      triggerEvent('r', [nativeScrollbarSizeChanged]);\n    });\n  }\n\n  return env;\n};\n\nexport const getEnvironment = (): Env => {\n  if (!environmentInstance) {\n    environmentInstance = createEnvironment();\n  }\n  return environmentInstance;\n};\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\nimport { getEnvironment } from '~/environment';\nimport type { DeepPartial } from '~/typings';\n\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\n  StaticInitializationElement<Args>,\n  (...args: Args) => any\n> extends (...args: infer P) => any\n  ? (...args: P) => HTMLElement\n  : never;\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\n  DynamicInitializationElement<Args>,\n  (...args: Args) => any\n> extends (...args: infer P) => any\n  ? (...args: P) => HTMLElement\n  : never;\n\nexport type StaticInitialization = HTMLElement | false | null;\nexport type DynamicInitialization = HTMLElement | boolean | null;\n\n/**\n * Static elements are elements which MUST be present in the final DOM.\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\n */\nexport type StaticInitializationElement<Args extends any[]> =\n  /** A function which returns the the StaticInitialization value. */\n  | ((...args: Args) => StaticInitialization)\n  /** The StaticInitialization value. */\n  | StaticInitialization;\n\n/**\n * Dynamic elements are elements which CAN be present in the final DOM.\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\n * With `true` an appropriate element is generated automatically.\n * With `false`, `null` or `undefined` the element won't be in the DOM.\n */\nexport type DynamicInitializationElement<Args extends any[]> =\n  /** A function which returns the the DynamicInitialization value. */\n  | ((...args: Args) => DynamicInitialization)\n  /** The DynamicInitialization value. */\n  | DynamicInitialization;\n\n/**\n * Describes how a OverlayScrollbar instance should initialize.\n */\nexport type Initialization = {\n  /**\n   * Customizes which elements are generated and used.\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\n   * Any passed function should be a \"pure\" function. (same input produces same output)\n   */\n  elements: {\n    /**\n     * Assign a custom element as the host element.\n     * Only relevant if the target element is a Textarea.\n     */\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\n    /** Assign a custom element as the viewport element. */\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\n    /** Assign a custom element as the padding element or force the element not to be generated. */\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\n    /** Assign a custom element as the content element or force the element not to be generated. */\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\n  };\n  /**\n   * Customizes elements related to the scrollbars.\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\n   */\n  scrollbars: {\n    slot: DynamicInitializationElement<\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\n    >;\n  };\n  /**\n   * Customizes the cancelation behavior.\n   */\n  cancel: {\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\n    nativeScrollbarsOverlaid: boolean;\n    /**\n     * Whether the initialization shall be canceled if its applied to a body element.\n     * With `true` an initialization is always canceled, with `false` its never canceled.\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\n     */\n    body: boolean | null;\n  };\n};\n\nexport type PartialInitialization = DeepPartial<Initialization>;\n\n/** The initialization target element. */\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\n\n/**\n * The initialization target object.\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\n */\nexport type InitializationTargetObject = PartialInitialization & {\n  target: InitializationTargetElement;\n};\n\n/** The initialization target. */\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\n\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\n  args: any,\n  value: any\n): T => (isFunction(value) ? value.apply(0, args) : value);\n\nexport const staticInitializationElement = <Args extends any[]>(\n  args: Args,\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\n  staticInitializationElementValue?: StaticInitializationElement<Args>\n): HTMLElement => {\n  const staticInitialization = isUndefined(staticInitializationElementValue)\n    ? defaultStaticInitializationElement\n    : staticInitializationElementValue;\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\n    args,\n    staticInitialization\n  );\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\n};\n\nexport const dynamicInitializationElement = <Args extends any[]>(\n  args: Args,\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\n): HTMLElement | false => {\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\n    ? defaultDynamicInitializationElement\n    : dynamicInitializationElementValue;\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\n    args,\n    dynamicInitialization\n  );\n  return (\n    !!resolvedInitialization &&\n    (isHTMLElement(resolvedInitialization)\n      ? resolvedInitialization\n      : fallbackDynamicInitializationElement.apply(0, args))\n  );\n};\n\nexport const cancelInitialization = (\n  isBody: boolean,\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\n): boolean => {\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\n    getEnvironment();\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\n    _getDefaultInitialization().cancel;\n\n  const resolvedNativeScrollbarsOverlaid =\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\n\n  const finalNativeScrollbarsOverlaid =\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\n    resolvedNativeScrollbarsOverlaid;\n  const finalDocumentScrollingElement =\n    isBody &&\n    (isNull(resolvedDocumentScrollingElement)\n      ? !_nativeScrollbarsHiding\n      : resolvedDocumentScrollingElement);\n\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\n};\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\n  each,\n  noop,\n  debounce,\n  MutationObserverConstructor,\n  addEventListener,\n  is,\n  find,\n  push,\n  runEachAndClear,\n  bind,\n  isEmptyArray,\n  deduplicateArray,\n  inArray,\n  concat,\n  getAttr,\n  isString,\n} from '~/support';\n\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\n\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\n\ninterface DOMObserverOptionsBase {\n  _attributes?: string[];\n  /**\n   * A function which can ignore a changed attribute if it returns true.\n   * for DOMTargetObserver this applies to the changes to the observed target\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\n   */\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\n}\n\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\n  _nestedTargetSelector?: string;\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\n}\n\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\n  /**\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\n   */\n  _styleChangingAttributes?: string[] | readonly string[];\n}\n\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\n\nexport type DOMObserverEventContentChange =\n  | Array<ContentChangeArrayItem>\n  | false\n  | null\n  | undefined;\n\nexport type DOMObserverIgnoreContentChange = (\n  mutation: MutationRecord,\n  isNestedTarget: boolean,\n  domObserverTarget: HTMLElement,\n  domObserverOptions?: DOMContentObserverOptions\n) => boolean;\n\nexport type DOMObserverIgnoreTargetChange = (\n  target: Node,\n  attributeName: string,\n  oldAttributeValue: string | null,\n  newAttributeValue: string | null\n) => boolean;\n\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\n  ? DOMContentObserverCallback\n  : DOMTargetObserverCallback;\n\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\n  ? DOMContentObserverOptions\n  : DOMTargetObserverOptions;\n\nexport type DOMObserver<ContentObserver extends boolean> = [\n  construct: () => () => void,\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\n];\n\ntype EventContentChangeUpdateElement = (\n  getElements?: (selector: string) => Node[],\n  removed?: boolean\n) => void;\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\n\n/**\n * Creates a set of helper functions to observe events of elements inside the target element.\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\n * @param callback Callback which is called if one of the elements emits the corresponding event.\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\n */\nconst createEventContentChange = (\n  target: HTMLElement,\n  callback: (...args: any) => any,\n  eventContentChange?: DOMObserverEventContentChange\n): EventContentChange => {\n  let destroyed = false;\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\n  const destroy = () => {\n    destroyed = true;\n  };\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\n    if (map && eventContentChange) {\n      const eventElmList = eventContentChange.map((item) => {\n        const [selector, eventNames] = item || [];\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\n        return [elements, eventNames] as const;\n      });\n\n      each(eventElmList, (item) =>\n        each(item[0], (elm) => {\n          const eventNames = item[1];\n          const entries = map.get(elm) || [];\n          const isTargetChild = target.contains(elm);\n\n          if (isTargetChild && eventNames) {\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\n              if (destroyed) {\n                removeListener();\n                map.delete(elm);\n              } else {\n                callback(event);\n              }\n            });\n            map.set(elm, push(entries, removeListener));\n          } else {\n            runEachAndClear(entries);\n            map.delete(elm);\n          }\n        })\n      );\n    }\n  };\n\n  updateElements();\n\n  return [destroy, updateElements];\n};\n\n/**\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\n * @param target The element which shall be observed.\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\n * @param callback The callback which gets called if a change was detected.\n * @param options The options for DOM change detection.\n * @returns A object which represents the instance of the DOM observer.\n */\nexport const createDOMObserver = <ContentObserver extends boolean>(\n  target: HTMLElement,\n  isContentObserver: ContentObserver,\n  callback: DOMObserverCallback<ContentObserver>,\n  options?: DOMObserverOptions<ContentObserver>\n): DOMObserver<ContentObserver> => {\n  let isConnected = false;\n  const {\n    _attributes,\n    _styleChangingAttributes,\n    _eventContentChange,\n    _nestedTargetSelector,\n    _ignoreTargetChange,\n    _ignoreContentChange,\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\n  const debouncedEventContentChange = debounce(\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\n    { _timeout: 33, _maxDelay: 99 }\n  );\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\n    target,\n    debouncedEventContentChange,\n    _eventContentChange\n  );\n\n  // MutationObserver\n  const finalAttributes = _attributes || [];\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\n  const observerCallback = (\n    fromRecords: boolean,\n    mutations: MutationRecord[]\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\n    if (!isEmptyArray(mutations)) {\n      const ignoreTargetChange = _ignoreTargetChange || noop;\n      const ignoreContentChange = _ignoreContentChange || noop;\n      const totalChangedNodes: Node[] = [];\n      const targetChangedAttrs: string[] = [];\n      let targetStyleChanged: boolean | '' | null | undefined = false;\n      let contentChanged: boolean | '' | null | undefined = false;\n      let childListChanged: boolean | '' | null | undefined = false;\n\n      each(mutations, (mutation) => {\n        const {\n          attributeName,\n          target: mutationTarget,\n          type,\n          oldValue,\n          addedNodes,\n          removedNodes,\n        } = mutation;\n        const isAttributesType = type === 'attributes';\n        const isChildListType = type === 'childList';\n        const targetIsMutationTarget = target === mutationTarget;\n        const isAttrChange = isAttributesType && attributeName;\n        const newValue =\n          isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '');\n        // narrow down attributeValue type to `string` or `null` but don't overwrite `<empty string>` with `null`\n        const attributeValue = isString(newValue) ? newValue : null;\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\n        const styleChangingAttrChanged =\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\n\n        // if is content observer and something changed in children\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\n          const contentAttrChanged = isAttributesType && attributeChanged;\n          const isNestedTarget =\n            contentAttrChanged &&\n            _nestedTargetSelector &&\n            is(mutationTarget, _nestedTargetSelector);\n          const baseAssertion = isNestedTarget\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\n            : !isAttributesType || contentAttrChanged;\n          const contentFinalChanged =\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\n\n          each(addedNodes, (node) => push(totalChangedNodes, node));\n          each(removedNodes, (node) => push(totalChangedNodes, node));\n\n          contentChanged = contentChanged || contentFinalChanged;\n          childListChanged = childListChanged || isChildListType;\n        }\n        // if is target observer and target attr changed\n        if (\n          !isContentObserver &&\n          targetIsMutationTarget &&\n          attributeChanged &&\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\n        ) {\n          push(targetChangedAttrs, attributeName);\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\n        }\n      });\n\n      // adds / removes the new elements from the event content change\n      updateEventContentChangeElements((selector: string) =>\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\n          push(arr, find(selector, node));\n          return is(node, selector) ? push(arr, node) : arr;\n        }, [])\n      );\n\n      if (isContentObserver) {\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\n          DOMObserverCallback<ContentObserver>\n        >;\n      }\n\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\n        const args = [\n          deduplicateArray(targetChangedAttrs),\n          targetStyleChanged,\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\n\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\n      }\n    }\n  };\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\n    bind(observerCallback, false)\n  );\n\n  return [\n    () => {\n      mutationObserver.observe(target, {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: observedAttributes,\n        subtree: isContentObserver,\n        childList: isContentObserver,\n        characterData: isContentObserver,\n      });\n      isConnected = true;\n\n      return () => {\n        if (isConnected) {\n          destroyEventContentChange();\n          mutationObserver.disconnect();\n          isConnected = false;\n        }\n      };\n    },\n    () => {\n      if (isConnected) {\n        debouncedEventContentChange._flush();\n        return observerCallback(true, mutationObserver.takeRecords());\n      }\n    },\n  ];\n};\n","import { each, keys } from '~/support';\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\n\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\n\nexport type InstancePluginEvent = {\n  /**\n   * Adds event listeners to the instance.\n   * @param eventListeners An object which contains the added listeners.\n   * @returns Returns a function which removes the added listeners.\n   */\n  (eventListeners: EventListeners): () => void;\n  /**\n   * Adds a single event listener to the instance.\n   * @param name The name of the event.\n   * @param listener The listener which is invoked on that event.\n   * @returns Returns a function which removes the added listeners.\n   */\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\n  /**\n   * Adds multiple event listeners to the instance.\n   * @param name The name of the event.\n   * @param listener The listeners which are invoked on that event.\n   * @returns Returns a function which removes the added listeners.\n   */\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\n};\n\n/**\n * Describes a OverlayScrollbars plugin module.\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\n */\nexport type PluginModule<\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\n> = (S extends PluginModuleInstance\n  ? {\n      /**\n       * Creates a plugin which is bound to the static object.\n       * The function will be called once with the static object as soon as the plugin is registered.\n       * The plugin can add new methods or fields to the passed static object.\n       * @param osStatic The static object the plugin is bound to.\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\n       */\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\n    }\n  : object) &\n  (I extends PluginModuleInstance\n    ? {\n        /**\n         * Creates a A plugin which is bound to an instance.\n         * The function will be called each time a new instance is created.\n         * The plugin can add new methods or fields to the passed instance object.\n         * @param osInstance The instance object the plugin is bound to.\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\n         * @param osStatic The static object the plugin is bound to.\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\n         */\n        instance: (\n          osInstance: OverlayScrollbars,\n          event: InstancePluginEvent,\n          osStatic: OverlayScrollbarsStatic\n        ) => I | void;\n      }\n    : object);\n\n/**\n * Describes a OverlayScrollbar plugin.\n */\nexport type Plugin<\n  Name extends string = string,\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\n> = {\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\n  [pluginName in Name]: PluginModule<S, I>;\n};\n\n/**\n * Describes a OverlayScrollbar plugin which has only a static module.\n */\nexport type StaticPlugin<\n  Name extends string = string,\n  T extends PluginModuleInstance = PluginModuleInstance\n> = Plugin<Name, T, void>;\n\n/**\n * Describes a OverlayScrollbar plugin which has only a instance module.\n */\nexport type InstancePlugin<\n  Name extends string = string,\n  T extends PluginModuleInstance = PluginModuleInstance\n> = Plugin<Name, void, T>;\n\n/**\n * Infers the type of the static modules instance of the passed plugin.\n */\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\n  infer Name\n>\n  ? T[Name]['static'] extends (...args: any[]) => any\n    ? ReturnType<T[Name]['static']>\n    : void\n  : void;\n\n/**\n * Infers the type of the instance modules instance of the passed plugin.\n */\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\n  infer Name\n>\n  ? T[Name]['instance'] extends (...args: any[]) => any\n    ? ReturnType<T[Name]['instance']>\n    : void\n  : void;\n\n/** All registered plugin modules. */\nexport const pluginModules: Record<string, PluginModule> = {};\n\n/** All static plugin module instances. */\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\n\n/**\n * Adds plugins.\n * @param addedPlugin The plugin(s) to add.\n * @returns The added plugin modules of the registered plugins.\n */\nexport const addPlugins = (addedPlugin: Plugin[]) => {\n  each(addedPlugin, (plugin) =>\n    each(plugin, (_, key) => {\n      pluginModules[key] = plugin[key];\n    })\n  );\n};\n\nexport const registerPluginModuleInstances = (\n  plugin: Plugin,\n  staticObj: OverlayScrollbarsStatic,\n  instanceInfo?: [\n    instanceObj: OverlayScrollbars,\n    event: InstancePluginEvent,\n    instancePluginMap?: Record<string, PluginModuleInstance>\n  ]\n): Array<PluginModuleInstance | void> =>\n  keys(plugin).map((name) => {\n    const { static: osStatic, instance: osInstance } = (\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\n    )[name];\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\n    const ctor = instanceInfo ? osInstance : osStatic;\n    if (ctor) {\n      const instance = instanceInfo\n        ? (\n            ctor as Extract<\n              typeof ctor,\n              (\n                osInstance: OverlayScrollbars,\n                event: InstancePluginEvent,\n                osStatic: OverlayScrollbarsStatic\n              ) => PluginModuleInstance | void\n            >\n          )(instanceObj!, event!, staticObj)\n        : (\n            ctor as Extract<\n              typeof ctor,\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\n            >\n          )(staticObj);\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\n    }\n  });\n\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\n): InferStaticPluginModuleInstance<T> | undefined =>\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\n","function _extends() {\n  return module.exports = _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _extends.apply(null, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import {\n  each,\n  hasOwnProperty,\n  keys,\n  push,\n  isEmptyObject,\n  type,\n  isUndefined,\n  isPlainObject,\n  isString,\n  createOrKeepArray,\n} from '~/support';\nimport type { PlainObject, DeepPartial } from '~/typings';\nimport type { OptionsObject } from '~/options';\n\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\n  OptionsTemplateTypeMap,\n  T\n>;\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\n\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\n  ? string extends T\n    ? OptionsTemplateValueNonEnum<T>\n    : string\n  : OptionsTemplateValueNonEnum<T>;\n\nexport type OptionsTemplate<T> = {\n  [P in keyof T]: T[P] extends OptionsObject\n    ? OptionsTemplate<T[P]>\n    : T[P] extends OptionsTemplateNativeTypes\n    ? OptionsTemplateValue<T[P]>\n    : never;\n};\n\nexport type OptionsValidationResult<T> = [\n  validated: DeepPartial<T>,\n  foreign: Record<string, unknown>\n];\n\ntype OptionsTemplateTypeMap = {\n  __TPL_boolean_TYPE__: boolean;\n  __TPL_number_TYPE__: number;\n  __TPL_string_TYPE__: string;\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\n  __TPL_function_TYPE__: OptionsFunctionType;\n  __TPL_null_TYPE__: null;\n  __TPL_object_TYPE__: OptionsObject;\n};\n\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\n  | OptionsTemplateType<T>\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\n\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\n  [P in keyof T]: TProps extends T[P] ? P : never;\n}[keyof T];\n\ntype OptionsTemplateTypesDictionary = {\n  readonly boolean: OptionsTemplateType<boolean>;\n  readonly number: OptionsTemplateType<number>;\n  readonly string: OptionsTemplateType<string>;\n  readonly array: OptionsTemplateType<Array<any>>;\n  readonly object: OptionsTemplateType<OptionsObject>;\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\n  readonly null: OptionsTemplateType<null>;\n};\n\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\n  boolean: '__TPL_boolean_TYPE__',\n  number: '__TPL_number_TYPE__',\n  string: '__TPL_string_TYPE__',\n  array: '__TPL_array_TYPE__',\n  object: '__TPL_object_TYPE__',\n  function: '__TPL_function_TYPE__',\n  null: '__TPL_null_TYPE__',\n};\n\n/**\n * Validates the given options object according to the given template object and returns a object which looks like:\n * {\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\n * }\n * @param template The template according to which the options object shall be validated.\n * @param options The options object which shall be validated.\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\n * Example (assume all properties are valid to the template):\n * Options object            : { a: 'a', b: 'b', c: 'c' }\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\n * Returned validated object : { c: 'c' }\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\n * @param propPath The propertyPath which lead to this object. (used for error logging)\n */\nconst validateRecursive = <T extends PlainObject>(\n  template: OptionsTemplate<T>,\n  options: DeepPartial<T>,\n  doWriteErrors?: boolean,\n  propPath?: string\n): OptionsValidationResult<T> => {\n  const validatedOptions: DeepPartial<T> = {};\n  const optionsCopy: DeepPartial<T> = { ...options };\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\n\n  each(props, (prop: Extract<keyof T, string>) => {\n    const optionsValue: any = options[prop];\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\n      template[prop];\n    const templateIsComplex = isPlainObject(templateValue);\n    const propPrefix = propPath ? `${propPath}.` : '';\n\n    // if the template has a object as value, it means that the options are complex (nested)\n    if (templateIsComplex && isPlainObject(optionsValue)) {\n      const [validated, foreign] = validateRecursive(\n        templateValue as T,\n        optionsValue,\n        doWriteErrors,\n        propPrefix + prop\n      );\n      validatedOptions[prop] = validated as any;\n      optionsCopy[prop] = foreign as any;\n\n      each([optionsCopy, validatedOptions], (value) => {\n        if (isEmptyObject(value[prop])) {\n          delete value[prop];\n        }\n      });\n    } else if (!templateIsComplex) {\n      let isValid = false;\n      const errorEnumStrings: Array<string> = [];\n      const errorPossibleTypes: Array<string> = [];\n      const optionsValueType = type(optionsValue) as keyof typeof optionsTemplateTypes;\n      const templateValueArr: Array<string | OptionsTemplateTypes> =\n        createOrKeepArray(templateValue);\n\n      each(templateValueArr, (currTemplateType) => {\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\n        let typeString: string | undefined;\n        each(optionsTemplateTypes, (value: string, key: string) => {\n          if (value === currTemplateType) {\n            typeString = key;\n          }\n        });\n        const isEnumString = isUndefined(typeString);\n        if (isEnumString && isString(optionsValue)) {\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\n          const enumStringSplit = currTemplateType.split(' ');\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\n\n          // build error message\n          push(errorEnumStrings, enumStringSplit);\n        } else {\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\n        }\n\n        // build error message\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\n\n        // continue if invalid, break if valid\n        return !isValid;\n      });\n\n      if (isValid) {\n        validatedOptions[prop] = optionsValue;\n      } else if (doWriteErrors) {\n        console.warn(\n          `${\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\n          }${\n            errorEnumStrings.length > 0\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\n              : ''\n          }`\n        );\n      }\n\n      delete optionsCopy[prop];\n    }\n  });\n\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\n};\n\n/**\n * Validates the given options object according to the given template object and returns a tuple which looks like:\n * [\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\n * ]\n * @param template The template according to which the options object shall be validated.\n * @param options The options object which shall be validated.\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\n */\nconst validateOptions = <T extends PlainObject>(\n  template: OptionsTemplate<T>,\n  options: DeepPartial<T>,\n  doWriteErrors?: boolean\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\n\nexport { validateOptions, optionsTemplateTypes };\n","import type {\n  Options,\n  PartialOptions,\n  OverflowBehavior,\n  ScrollbarsVisibilityBehavior,\n  ScrollbarsAutoHideBehavior,\n  ScrollbarsClickScrollBehavior,\n} from '~/options';\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\nimport type { StaticPlugin } from '~/plugins';\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\n\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\n\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\n  [optionsValidationPluginModuleName]: {\n    static: () => {\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\n        oTypes.array,\n        oTypes.null,\n      ];\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\n        'hidden scroll visible visible-hidden';\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\n        'visible hidden auto';\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\n        'never scroll leavemove';\n      const scrollbarsClickScrollAllowedValues: OptionsTemplateValue<ScrollbarsClickScrollBehavior> =\n        [booleanAllowedValues, oTypes.string];\n\n      const optionsTemplate: OptionsTemplate<Options> = {\n        paddingAbsolute: booleanAllowedValues, // true || false\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\n        update: {\n          elementEvents: arrayNullValues, // array of tuples || null\n          attributes: arrayNullValues,\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\n        },\n        overflow: {\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scroll\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scroll\n        },\n        scrollbars: {\n          theme: [oTypes.string, oTypes.null], // string || null\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\n          autoHideDelay: numberAllowedValues, // number\n          autoHideSuspend: booleanAllowedValues, // true || false\n          dragScroll: booleanAllowedValues, // true || false\n          clickScroll: scrollbarsClickScrollAllowedValues, // true || false || instant\n          pointers: [oTypes.array, oTypes.null], // string array\n        },\n        /*\n        textarea: {\n          dynWidth: booleanAllowedValues, // true || false\n          dynHeight: booleanAllowedValues, // true || false\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\n        },\n        */\n      };\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\n        return { ...foreign, ...validated };\n      };\n    },\n  },\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\n","import {\n  createDOM,\n  appendChildren,\n  getOffsetSize,\n  addEventListener,\n  addClass,\n  equalWH,\n  cAF,\n  rAF,\n  stopPropagation,\n  bind,\n  scrollElementTo,\n  strWidth,\n  strHeight,\n  setStyles,\n} from '~/support';\nimport {\n  classNameSizeObserverListenerScroll,\n  classNameSizeObserverListenerItem,\n  classNameSizeObserverListenerItemFinal,\n} from '~/classnames';\nimport type { StaticPlugin } from '../plugins';\n\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\n\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\n  [sizeObserverPluginName]: {\n    static:\n      () =>\n      (\n        listenerElement: HTMLElement,\n        onSizeChangedCallback: (appear: boolean) => any,\n        observeAppearChange: boolean | null | undefined\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\n        const scrollAmount = 3333333;\n        const scrollEventName = 'scroll';\n        const observerElementChildren = createDOM(\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\n        );\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\n\n        let cacheSize = getOffsetSize(observerElementChildrenRoot);\n        let currSize = cacheSize;\n        let isDirty = false;\n        let rAFId: number;\n\n        const reset = () => {\n          scrollElementTo(expandElement, scrollAmount);\n          scrollElementTo(shrinkElement, scrollAmount);\n        };\n        const onResized = (appear?: unknown) => {\n          rAFId = 0;\n          if (isDirty) {\n            cacheSize = currSize;\n            onSizeChangedCallback(appear === true);\n          }\n        };\n        const onScroll = (scrollEvent?: Event | false) => {\n          currSize = getOffsetSize(observerElementChildrenRoot);\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\n\n          if (scrollEvent) {\n            stopPropagation(scrollEvent);\n\n            if (isDirty && !rAFId) {\n              cAF!(rAFId);\n              rAFId = rAF!(onResized);\n            }\n          } else {\n            onResized(scrollEvent === false);\n          }\n\n          reset();\n        };\n        const destroyFns = [\n          appendChildren(listenerElement, observerElementChildren),\n          addEventListener(expandElement, scrollEventName, onScroll),\n          addEventListener(shrinkElement, scrollEventName, onScroll),\n        ];\n\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\n\n        // lets assume that the divs will never be that large and a constant value is enough\n        setStyles(expandElementChild, {\n          [strWidth]: scrollAmount,\n          [strHeight]: scrollAmount,\n        });\n\n        rAF!(reset);\n\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\n      },\n  },\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\n","import { strHidden, strScroll, strVisible } from '~/support';\nimport type { Env } from '~/environment';\nimport type { XY } from '~/support';\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\nimport type { OverflowStyle } from '~/typings';\n\nexport interface ViewportOverflowState {\n  _overflowScroll: XY<boolean>;\n  _overflowStyle: XY<OverflowStyle>;\n}\n\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\n  const { _nativeScrollbarsOverlaid } = env;\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\n    'showNativeOverlaidScrollbars'\n  );\n\n  return [\n    showNativeOverlaidScrollbarsOption &&\n      _nativeScrollbarsOverlaid.x &&\n      _nativeScrollbarsOverlaid.y,\n    showNativeOverlaidScrollbarsChanged,\n  ] as const;\n};\n\nexport const overflowIsVisible = (overflowBehavior: string) =>\n  overflowBehavior.indexOf(strVisible) === 0;\n\n/**\n * Creates a viewport overflow state object.\n * @param hasOverflow The information whether an axis has overflow.\n * @param overflowBehavior The overflow behavior according to the options.\n * @returns A object which represents the newly set overflow state.\n */\nexport const createViewportOverflowState = (\n  hasOverflow: Partial<XY<boolean>>,\n  overflowBehavior: XY<OverflowBehavior>\n): ViewportOverflowState => {\n  const getAxisOverflowStyle = (\n    axisBehavior: OverflowBehavior,\n    axisHasOverflow: boolean | undefined,\n    perpendicularBehavior: OverflowBehavior,\n    perpendicularOverflow: boolean | undefined\n  ): OverflowStyle => {\n    // convert behavior to style:\n    // 'visible'        -> 'hidden'\n    // 'hidden'         -> 'hidden'\n    // 'scroll'         -> 'scroll'\n    // 'visible-hidden' -> 'hidden'\n    // 'visible-scroll' -> 'scroll'\n    const behaviorStyle =\n      axisBehavior === strVisible\n        ? strHidden\n        : (axisBehavior.replace(`${strVisible}-`, '') as OverflowStyle);\n    const axisOverflowVisible = overflowIsVisible(axisBehavior);\n    const perpendicularOverflowVisible = overflowIsVisible(perpendicularBehavior);\n\n    // if no axis has overflow set 'hidden'\n    if (!axisHasOverflow && !perpendicularOverflow) {\n      return strHidden;\n    }\n\n    // if both axis have a visible behavior ('visible', 'visible-hidden', 'visible-scroll') set 'visible'\n    if (axisOverflowVisible && perpendicularOverflowVisible) {\n      return strVisible;\n    }\n\n    // this this axis has a visible behavior\n    if (axisOverflowVisible) {\n      const nonPerpendicularOverflow = axisHasOverflow ? strVisible : strHidden;\n      return axisHasOverflow && perpendicularOverflow\n        ? behaviorStyle // if both axis have an overflow set ('hidden' or 'scroll')\n        : nonPerpendicularOverflow; // if only this axis has an overflow set 'visible', if no axis has an overflow set 'hidden'\n    }\n\n    const nonOverflow =\n      perpendicularOverflowVisible && perpendicularOverflow ? strVisible : strHidden;\n    return axisHasOverflow\n      ? behaviorStyle // if this axis has an overflow\n      : nonOverflow; // if the perp. axis has a visible behavior and has an overflow set 'visible', otherwise set 'hidden'\n  };\n\n  const _overflowStyle = {\n    x: getAxisOverflowStyle(overflowBehavior.x, hasOverflow.x, overflowBehavior.y, hasOverflow.y),\n    y: getAxisOverflowStyle(overflowBehavior.y, hasOverflow.y, overflowBehavior.x, hasOverflow.x),\n  };\n\n  return {\n    _overflowStyle,\n    _overflowScroll: {\n      x: _overflowStyle.x === strScroll,\n      y: _overflowStyle.y === strScroll,\n    },\n  };\n};\n","import {\n  keys,\n  noop,\n  each,\n  assignDeep,\n  strMarginBottom,\n  strMarginLeft,\n  strMarginRight,\n  strPaddingBottom,\n  strPaddingLeft,\n  strPaddingRight,\n  strPaddingTop,\n  getStyles,\n  setStyles,\n  removeAttrClass,\n  strWidth,\n  strOverflowY,\n  strOverflowX,\n  strScroll,\n} from '~/support';\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\nimport { getShowNativeOverlaidScrollbars } from '~/setups/structureSetup/structureSetup.utils';\nimport type { ObserversSetupState } from '~/setups';\nimport type { Options, OptionsCheckFn } from '~/options';\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\nimport type { Env } from '~/environment';\nimport type { WH } from '~/support';\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\nimport type { StructureSetupState } from '~/setups/structureSetup';\nimport type { StaticPlugin } from '~/plugins';\n\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\n\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\n  [scrollbarsHidingPluginName]: {\n    static: () => ({\n      _viewportArrangement: (\n        structureSetupElements: StructureSetupElementsObj,\n        structureSetupState: StructureSetupState,\n        observersSetupState: ObserversSetupState,\n        env: Env,\n        checkOptions: OptionsCheckFn<Options>\n      ) => {\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\n        const doViewportArrange =\n          !_viewportIsTarget &&\n          !_nativeScrollbarsHiding &&\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\n\n        /**\n         * Gets the current overflow state of the viewport.\n         */\n        const readViewportOverflowState = (): ViewportOverflowState => {\n          const getStatePerAxis = (styleKey: StyleObjectKey) => {\n            const overflowStyle = getStyles(_viewport, styleKey) as OverflowStyle;\n            const overflowScroll = overflowStyle === strScroll;\n\n            return [overflowStyle, overflowScroll] as const;\n          };\n\n          const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\n          const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\n\n          return {\n            _overflowStyle: {\n              x: xOverflowStyle,\n              y: yOverflowStyle,\n            },\n            _overflowScroll: {\n              x: xOverflowScroll,\n              y: yOverflowScroll,\n            },\n          };\n        };\n\n        /**\n         * Gets the hide offset matching the passed overflow state.\n         * @param viewportOverflowState The overflow state of the viewport\n         */\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\n          const { _overflowScroll } = viewportOverflowState;\n          const arrangeHideOffset =\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\n\n          const getHideOffsetPerAxis = (\n            isOverlaid: boolean,\n            overflowScroll: boolean,\n            nativeScrollbarSize: number\n          ) => {\n            const nonScrollbarStylingHideOffset = isOverlaid\n              ? arrangeHideOffset\n              : nativeScrollbarSize;\n            const scrollbarsHideOffset =\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\n\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\n          };\n\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\n            _nativeScrollbarsOverlaid.x,\n            _overflowScroll.x,\n            _nativeScrollbarsSize.x\n          );\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\n            _nativeScrollbarsOverlaid.y,\n            _overflowScroll.y,\n            _nativeScrollbarsSize.y\n          );\n\n          return {\n            _scrollbarsHideOffset: {\n              x: xScrollbarsHideOffset,\n              y: yScrollbarsHideOffset,\n            },\n            _scrollbarsHideOffsetArrange: {\n              x: xScrollbarsHideOffsetArrange,\n              y: yScrollbarsHideOffsetArrange,\n            },\n          };\n        };\n\n        /**\n         * Hides the native scrollbars according to the passed parameters.\n         * @param viewportOverflowState The viewport overflow state.\n         * @param directionIsRTL Whether the direction is RTL or not.\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\n         */\n        const _hideNativeScrollbars = (\n          viewportOverflowState: ViewportOverflowState,\n          { _directionIsRTL }: ObserversSetupState,\n          viewportArrange: boolean\n        ): StyleObject | undefined => {\n          if (!_viewportIsTarget) {\n            const viewportStyleObj: StyleObject = assignDeep(\n              {},\n              {\n                [strMarginRight]: 0,\n                [strMarginBottom]: 0,\n                [strMarginLeft]: 0,\n              }\n            );\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\n              _getViewportOverflowHideOffset(viewportOverflowState);\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\n            const { _viewportPaddingStyle } = structureSetupState;\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\n              ? strMarginLeft\n              : strMarginRight;\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\n              ? strPaddingLeft\n              : strPaddingRight;\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\n            const horizontalPaddingValue = _viewportPaddingStyle[\n              viewportHorizontalPaddingKey\n            ] as number;\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\n\n            // horizontal\n            viewportStyleObj[strWidth] = `calc(100% + ${\n              hideOffsetY + horizontalMarginValue * -1\n            }px)`;\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\n\n            // vertical\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\n\n            // viewport arrange additional styles\n            if (viewportArrange) {\n              viewportStyleObj[viewportHorizontalPaddingKey] =\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\n              viewportStyleObj[strPaddingBottom] =\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\n            }\n\n            return viewportStyleObj;\n          }\n        };\n\n        /**\n         * Sets the styles of the viewport arrange element.\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\n         * @param viewportScrollSize The content scroll size.\n         * @param directionIsRTL Whether the direction is RTL or not.\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\n         */\n        const _arrangeViewport = (\n          viewportOverflowState: ViewportOverflowState,\n          viewportScrollSize: WH<number>,\n          sizeFraction: WH<number>\n        ) => {\n          if (doViewportArrange) {\n            const { _viewportPaddingStyle } = structureSetupState;\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\n              _getViewportOverflowHideOffset(viewportOverflowState);\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\n            const { _directionIsRTL } = observersSetupState;\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\n              ? strPaddingRight\n              : strPaddingLeft;\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\n              viewportArrangeHorizontalPaddingKey\n            ] as number;\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\n            const arrangeSize = {\n              w:\n                hideOffsetY && arrangeY\n                  ? `${\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\n                    }px`\n                  : '',\n              h:\n                hideOffsetX && arrangeX\n                  ? `${\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\n                    }px`\n                  : '',\n            };\n\n            setStyles(_viewport, {\n              '--os-vaw': arrangeSize.w,\n              '--os-vah': arrangeSize.h,\n            });\n          }\n\n          return doViewportArrange;\n        };\n\n        /**\n         * Removes all styles applied because of the viewport arrange strategy.\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\n         * @param directionIsRTL Whether the direction is RTL or not.\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\n         */\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\n          if (doViewportArrange) {\n            const finalViewportOverflowState = viewportOverflowState || readViewportOverflowState();\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\n              finalViewportOverflowState\n            );\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\n            const finalPaddingStyle: StyleObject = {};\n            const assignProps = (props: string[]) =>\n              each(props, (prop) => {\n                finalPaddingStyle[prop as StyleObjectKey] =\n                  viewportPaddingStyle[prop as StyleObjectKey];\n              });\n\n            if (arrangeX) {\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\n            }\n\n            if (arrangeY) {\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\n            }\n\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\n            const addArrange = removeAttrClass(\n              _viewport,\n              dataAttributeViewport,\n              dataValueViewportArrange\n            );\n\n            setStyles(_viewport, finalPaddingStyle);\n\n            return [\n              () => {\n                setStyles(\n                  _viewport,\n                  assignDeep(\n                    {},\n                    prevStyle,\n                    _hideNativeScrollbars(\n                      finalViewportOverflowState,\n                      observersSetupState,\n                      doViewportArrange\n                    )\n                  )\n                );\n                addArrange();\n              },\n              finalViewportOverflowState,\n            ] as const;\n          }\n          return [noop] as const;\n        };\n\n        return {\n          _getViewportOverflowHideOffset,\n          _arrangeViewport,\n          _undoViewportArrange,\n          _hideNativeScrollbars,\n        };\n      },\n    }),\n  },\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\n","import { animateNumber, noop, selfClearTimeout } from '~/support';\nimport type { StaticPlugin } from '~/plugins';\n\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\n\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\n  [clickScrollPluginModuleName]: {\n    static:\n      () =>\n      (\n        moveHandleRelative: (deltaMovement: number) => void,\n        targetOffset: number,\n        handleLength: number,\n        onClickScrollCompleted: (stopped: boolean) => void\n      ) => {\n        // click scroll animation has 2 main parts:\n        // 1. the \"click\" which scrolls 100% of the viewport in a certain amount of time\n        // 2. the \"press\" which scrolls to the point where the cursor is located, the \"press\" always waits for the \"click\" to finish\n        // The \"click\" should not be canceled by a \"pointerup\" event because very fast clicks or taps would cancel it too fast\n        // The \"click\" should only be canceled by a subsequent \"pointerdown\" event because otherwise 2 animations would run\n        // The \"press\" should be canceld by the next \"pointerup\" event\n\n        let stopped = false;\n        let stopPressAnimation = noop;\n        const linearScrollMs = 133;\n        const easedScrollMs = 222;\n        const [setPressAnimationTimeout, clearPressAnimationTimeout] =\n          selfClearTimeout(linearScrollMs);\n        const targetOffsetSign = Math.sign(targetOffset);\n        const handleLengthWithTargetSign = handleLength * targetOffsetSign;\n        const handleLengthWithTargetSignHalf = handleLengthWithTargetSign / 2;\n        const easing = (x: number) => 1 - (1 - x) * (1 - x); // easeOutQuad;\n        const easedEndPressAnimation = (from: number, to: number) =>\n          animateNumber(from, to, easedScrollMs, moveHandleRelative, easing);\n        const linearPressAnimation = (linearFrom: number, msFactor: number) =>\n          animateNumber(\n            linearFrom,\n            targetOffset - handleLengthWithTargetSign,\n            linearScrollMs * msFactor,\n            (progress, _, completed) => {\n              moveHandleRelative(progress);\n\n              if (completed) {\n                stopPressAnimation = easedEndPressAnimation(progress, targetOffset);\n              }\n            }\n          );\n        const stopClickAnimation = animateNumber(\n          0,\n          handleLengthWithTargetSign,\n          easedScrollMs,\n          (clickAnimationProgress, _, clickAnimationCompleted) => {\n            moveHandleRelative(clickAnimationProgress);\n\n            if (clickAnimationCompleted) {\n              onClickScrollCompleted(stopped);\n\n              if (!stopped) {\n                const remainingScrollDistance = targetOffset - clickAnimationProgress;\n                const continueWithPress =\n                  Math.sign(remainingScrollDistance - handleLengthWithTargetSignHalf) ===\n                  targetOffsetSign;\n\n                continueWithPress &&\n                  setPressAnimationTimeout(() => {\n                    const remainingLinearScrollDistance =\n                      remainingScrollDistance - handleLengthWithTargetSign;\n                    const linearBridge =\n                      Math.sign(remainingLinearScrollDistance) === targetOffsetSign;\n\n                    stopPressAnimation = linearBridge\n                      ? linearPressAnimation(\n                          clickAnimationProgress,\n                          Math.abs(remainingLinearScrollDistance) / handleLength\n                        )\n                      : easedEndPressAnimation(clickAnimationProgress, targetOffset);\n                  });\n              }\n            }\n          },\n          easing\n        );\n\n        return (stopClick?: boolean) => {\n          stopped = true;\n\n          if (stopClick) {\n            stopClickAnimation();\n          }\n\n          clearPressAnimationTimeout();\n          stopPressAnimation();\n        };\n      },\n  },\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\n","import {\n  createCache,\n  createDOM,\n  runEachAndClear,\n  addEventListener,\n  addClass,\n  push,\n  ResizeObserverConstructor,\n  appendChildren,\n  domRectHasDimensions,\n  bind,\n  noop,\n  domRectAppeared,\n  concat,\n} from '~/support';\nimport {\n  classNameSizeObserver,\n  classNameSizeObserverAppear,\n  classNameSizeObserverListener,\n} from '~/classnames';\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\nimport type { SizeObserverPlugin } from '~/plugins';\n\nexport interface SizeObserverOptions {\n  /** Whether appearing should be observed. */\n  _appear?: boolean;\n}\n\nexport interface SizeObserverCallbackParams {\n  _sizeChanged: boolean;\n  _appear?: boolean;\n}\n\nexport type SizeObserver = () => () => void;\n\n/**\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\n * @param target The target element which shall be observed.\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\n * @param options The options for size detection, whether to observe also direction and appear.\n * @returns A object which represents the instance of the size observer.\n */\nexport const createSizeObserver = (\n  target: HTMLElement,\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\n  options?: SizeObserverOptions\n): SizeObserver => {\n  const { _appear: observeAppearChange } = options || {};\n  const sizeObserverPlugin =\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\n    _initialValue: false,\n    _alwaysUpdateValues: true,\n  });\n\n  return () => {\n    const destroyFns: (() => void)[] = [];\n    const baseElements = createDOM(\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\n    );\n    const sizeObserver = baseElements[0] as HTMLElement;\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\n    const onSizeChangedCallbackProxy = (sizeChangedContext?: ResizeObserverEntry | boolean) => {\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\n\n      let skip = false;\n      let appear = false;\n\n      // if triggered from RO.\n      if (isResizeObserverCall) {\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\n          sizeChangedContext.contentRect\n        );\n        const hasDimensions = domRectHasDimensions(currRContentRect);\n        appear = domRectAppeared(currRContentRect, prevContentRect);\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\n      }\n      // else if it triggered with appear from polyfill\n      else {\n        appear = sizeChangedContext === true;\n      }\n\n      if (!skip) {\n        onSizeChangedCallback({\n          _sizeChanged: true,\n          _appear: appear,\n        });\n      }\n    };\n\n    if (ResizeObserverConstructor) {\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\n        onSizeChangedCallbackProxy(entries.pop())\n      );\n      resizeObserverInstance.observe(listenerElement);\n      push(destroyFns, () => {\n        resizeObserverInstance.disconnect();\n      });\n    } else if (sizeObserverPlugin) {\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\n        listenerElement,\n        onSizeChangedCallbackProxy,\n        observeAppearChange\n      );\n      push(\n        destroyFns,\n        concat(\n          [\n            addClass(sizeObserver, classNameSizeObserverAppear),\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\n          ],\n          pluginDestroyFns\n        )\n      );\n    } else {\n      return noop;\n    }\n\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\n  };\n};\n","import {\n  createDiv,\n  getOffsetSize,\n  runEachAndClear,\n  createCache,\n  push,\n  IntersectionObserverConstructor,\n  appendChildren,\n  bind,\n} from '~/support';\nimport { createSizeObserver } from '~/observers/sizeObserver';\nimport { classNameTrinsicObserver } from '~/classnames';\nimport type { WH, CacheValues } from '~/support';\n\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\nexport type TrinsicObserver = [\n  construct: () => () => void,\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\n];\n\n/**\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\n * @param target The element which shall be observed.\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\n * @returns A object which represents the instance of the trinsic observer.\n */\nexport const createTrinsicObserver = (\n  target: HTMLElement,\n  onTrinsicChangedCallback: TrinsicObserverCallback\n): TrinsicObserver => {\n  let intersectionObserverInstance: undefined | IntersectionObserver;\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\n    (ioEntryOrSize as WH<number>).h === 0 ||\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\n  const [updateHeightIntrinsicCache] = createCache({\n    _initialValue: false,\n  });\n  const triggerOnTrinsicChangedCallback = (\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\n    fromRecords?: boolean\n  ): void | Parameters<TrinsicObserverCallback> => {\n    if (updateValue) {\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\n      const [, heightIntrinsicChanged] = heightIntrinsic;\n      return (\n        heightIntrinsicChanged &&\n        !fromRecords &&\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\n      );\n    }\n  };\n  const intersectionObserverCallback = (\n    fromRecords: boolean,\n    entries: IntersectionObserverEntry[]\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\n\n  return [\n    () => {\n      const destroyFns: (() => void)[] = [];\n\n      if (IntersectionObserverConstructor) {\n        intersectionObserverInstance = new IntersectionObserverConstructor(\n          bind(intersectionObserverCallback, false),\n          { root: target }\n        );\n        intersectionObserverInstance.observe(trinsicObserver);\n        push(destroyFns, () => {\n          intersectionObserverInstance!.disconnect();\n        });\n      } else {\n        const onSizeChanged = () => {\n          const newSize = getOffsetSize(trinsicObserver);\n          triggerOnTrinsicChangedCallback(newSize);\n        };\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\n        onSizeChanged();\n      }\n\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\n    },\n    () =>\n      intersectionObserverInstance &&\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\n  ];\n};\n","import {\n  ResizeObserverConstructor,\n  assignDeep,\n  closest,\n  createCache,\n  debounce,\n  equalWH,\n  getFractionalSize,\n  isArray,\n  isFunction,\n  isNumber,\n  keys,\n  liesBetween,\n  getScrollSize,\n  getElementScroll,\n  scrollElementTo,\n  domRectAppeared,\n  concat,\n  getStyles,\n  hasAttrClass,\n} from '~/support';\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\nimport { getEnvironment } from '~/environment';\nimport {\n  classNameScrollbar,\n  dataAttributeHost,\n  dataAttributeViewport,\n  dataValueViewportMeasuring,\n  dataValueViewportArrange,\n  dataValueNoClipping,\n} from '~/classnames';\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\nimport type { Options, OptionsCheckFn } from '~/options';\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\nimport type { SizeObserverCallbackParams } from '~/observers';\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\nimport type { CacheValues, WH } from '~/support';\nimport type { PlainObject } from '~/typings';\n\nexport interface ObserversSetupState {\n  _heightIntrinsic: boolean;\n  _directionIsRTL: boolean;\n}\n\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\n  _takeRecords?: boolean;\n}\n\nexport type ObserversSetupUpdateHints = {\n  _sizeChanged?: boolean;\n  _directionChanged?: boolean;\n  _heightIntrinsicChanged?: boolean;\n  _hostMutation?: boolean;\n  _contentMutation?: boolean;\n  _appear?: boolean;\n  _scrollbarSizeChanged?: boolean;\n};\n\nexport type ObserversSetup = Setup<\n  ObserversSetupUpdateInfo,\n  ObserversSetupState,\n  ObserversSetupUpdateHints\n>;\n\nexport const createObserversSetup = (\n  structureSetupElements: StructureSetupElementsObj,\n  structureSetupState: StructureSetupState,\n  getCurrentOption: OptionsCheckFn<Options>,\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\n): ObserversSetup => {\n  let debounceTimeout: number | false | undefined;\n  let debounceMaxDelay: number | false | undefined;\n  let updateContentMutationObserver: (() => void) | undefined;\n  let destroyContentMutationObserver: (() => void) | undefined;\n  let prevContentRect: DOMRectReadOnly | undefined;\n  let prevDirectionIsRTL: boolean | undefined;\n  const hostSelector = `[${dataAttributeHost}]`;\n\n  // TODO: observer textarea attrs if textarea\n\n  const viewportSelector = `[${dataAttributeViewport}]`;\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open', 'wrap', 'cols', 'rows'];\n  const {\n    _target,\n    _host,\n    _viewport,\n    _scrollOffsetElement,\n    _content,\n    _viewportIsTarget,\n    _isBody,\n    _viewportHasClass,\n    _viewportAddRemoveClass,\n    _removeScrollObscuringStyles,\n  } = structureSetupElements;\n\n  const getDirectionIsRTL = (elm: HTMLElement): boolean => getStyles(elm, 'direction') === 'rtl';\n\n  const state: ObserversSetupState = {\n    _heightIntrinsic: false,\n    _directionIsRTL: getDirectionIsRTL(_target),\n  };\n  const env = getEnvironment();\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\n    scrollbarsHidingPluginName\n  );\n\n  const [updateContentSizeCache] = createCache<WH<number>>(\n    {\n      _equal: equalWH,\n      _initialValue: { w: 0, h: 0 },\n    },\n    () => {\n      const _undoViewportArrange =\n        scrollbarsHidingPlugin &&\n        scrollbarsHidingPlugin._viewportArrangement(\n          structureSetupElements,\n          structureSetupState,\n          state,\n          env,\n          getCurrentOption\n        )._undoViewportArrange;\n\n      const viewportIsTargetBody = _isBody && _viewportIsTarget;\n      const noClipping =\n        !viewportIsTargetBody && hasAttrClass(_host, dataAttributeHost, dataValueNoClipping);\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\n      const scrollOffset = isArranged && getElementScroll(_scrollOffsetElement);\n      const revertScrollObscuringStyles = scrollOffset && _removeScrollObscuringStyles();\n\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, noClipping);\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\n      const viewportScroll = getScrollSize(_viewport);\n      const fractional = getFractionalSize(_viewport);\n\n      redoViewportArrange && redoViewportArrange();\n\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\n      revertScrollObscuringStyles && revertScrollObscuringStyles();\n      noClipping && revertMeasuring();\n\n      return {\n        w: viewportScroll.w + fractional.w,\n        h: viewportScroll.h + fractional.h,\n      };\n    }\n  );\n\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\n    _timeout: () => debounceTimeout,\n    _maxDelay: () => debounceMaxDelay,\n    _mergeParams(prev, curr) {\n      const [prevObj] = prev;\n      const [currObj] = curr;\n      return [\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\n          return obj;\n        }, {} as PlainObject),\n      ] as [Partial<ObserversSetupUpdateHints>];\n    },\n  });\n\n  const setDirection = (updateHints: ObserversSetupUpdateHints) => {\n    const newDirectionIsRTL = getDirectionIsRTL(_target);\n    assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\n    assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\n    prevDirectionIsRTL = newDirectionIsRTL;\n  };\n\n  const onTrinsicChanged = (\n    heightIntrinsicCache: CacheValues<boolean>,\n    fromRecords?: true\n  ): ObserversSetupUpdateHints => {\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\n    const updateHints: ObserversSetupUpdateHints = {\n      _heightIntrinsicChanged: heightIntrinsicChanged,\n    };\n\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\n    !fromRecords && onObserversUpdated(updateHints);\n\n    return updateHints;\n  };\n\n  const onSizeChanged = ({ _sizeChanged, _appear }: SizeObserverCallbackParams) => {\n    const exclusiveSizeChange = _sizeChanged && !_appear;\n    const updateFn =\n      // use debounceed update:\n      // if native scrollbars hiding is supported\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\n      !exclusiveSizeChange && env._nativeScrollbarsHiding\n        ? onObserversUpdatedDebounced\n        : onObserversUpdated;\n\n    const updateHints: ObserversSetupUpdateHints = {\n      _sizeChanged: _sizeChanged || _appear,\n      _appear,\n    };\n\n    setDirection(updateHints);\n\n    updateFn(updateHints);\n  };\n\n  const onContentMutation = (\n    contentChangedThroughEvent: boolean,\n    fromRecords?: true\n  ): ObserversSetupUpdateHints => {\n    const [, _contentMutation] = updateContentSizeCache();\n    const updateHints: ObserversSetupUpdateHints = {\n      _contentMutation,\n    };\n\n    setDirection(updateHints);\n\n    // if contentChangedThroughEvent is true its already debounced\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\n\n    _contentMutation && !fromRecords && updateFn(updateHints);\n\n    return updateHints;\n  };\n\n  const onHostMutation = (\n    targetChangedAttrs: string[],\n    targetStyleChanged: boolean,\n    fromRecords?: true\n  ): ObserversSetupUpdateHints => {\n    const updateHints: ObserversSetupUpdateHints = {\n      _hostMutation: targetStyleChanged,\n    };\n\n    setDirection(updateHints);\n\n    if (targetStyleChanged && !fromRecords) {\n      onObserversUpdatedDebounced(updateHints);\n    }\n    /*\n    else if (!_viewportIsTarget) {\n      updateViewportAttrsFromHost(targetChangedAttrs);\n    }\n    */\n\n    return updateHints;\n  };\n\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\n    ? createTrinsicObserver(_host, onTrinsicChanged)\n    : [];\n\n  const constructSizeObserver =\n    !_viewportIsTarget &&\n    createSizeObserver(_host, onSizeChanged, {\n      _appear: true,\n    });\n\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\n    _host,\n    false,\n    onHostMutation,\n    {\n      _styleChangingAttributes: baseStyleChangingAttrs,\n      _attributes: baseStyleChangingAttrs,\n    }\n  );\n\n  const viewportIsTargetResizeObserver =\n    _viewportIsTarget &&\n    ResizeObserverConstructor &&\n    new ResizeObserverConstructor((entries) => {\n      const currContentRect = entries[entries.length - 1].contentRect;\n      onSizeChanged({\n        _sizeChanged: true,\n        _appear: domRectAppeared(currContentRect, prevContentRect),\n      });\n      prevContentRect = currContentRect;\n    });\n  const onWindowResizeDebounced = debounce(\n    () => {\n      const [, _contentMutation] = updateContentSizeCache();\n      onObserversUpdated({ _contentMutation });\n    },\n    {\n      _timeout: 222,\n      _leading: true,\n    }\n  );\n\n  return [\n    () => {\n      // order is matter!\n      // updateViewportAttrsFromHost();\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\n      const destroyHostMutationObserver = constructHostMutationObserver();\n      const removeResizeListener = env._addResizeListener((_scrollbarSizeChanged) => {\n        if (_scrollbarSizeChanged) {\n          onObserversUpdatedDebounced({ _scrollbarSizeChanged });\n        } else {\n          onWindowResizeDebounced();\n        }\n      });\n\n      return () => {\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\n        destroySizeObserver && destroySizeObserver();\n        destroyTrinsicObserver && destroyTrinsicObserver();\n        destroyContentMutationObserver && destroyContentMutationObserver();\n        destroyHostMutationObserver();\n        removeResizeListener();\n      };\n    },\n    ({ _checkOption, _takeRecords, _force }) => {\n      const updateHints: ObserversSetupUpdateHints = {};\n\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\n      const takeRecords = _takeRecords || _force;\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\n\n      if (contentMutationObserverChanged) {\n        updateContentMutationObserver && updateContentMutationObserver();\n        destroyContentMutationObserver && destroyContentMutationObserver();\n\n        const [construct, update] = createDOMObserver(\n          _content || _viewport,\n          true,\n          onContentMutation,\n          {\n            _attributes: concat(baseStyleChangingAttrs, attributes || []),\n            _eventContentChange: elementEvents,\n            _nestedTargetSelector: hostSelector,\n            _ignoreContentChange: (mutation, isNestedTarget) => {\n              const { target: mutationTarget, attributeName } = mutation;\n              const ignore =\n                !isNestedTarget && attributeName && !_viewportIsTarget\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\n                  : false;\n              return (\n                ignore ||\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\n                !!ignoreMutationFromOptions(mutation)\n              );\n            },\n          }\n        );\n\n        destroyContentMutationObserver = construct();\n        updateContentMutationObserver = update;\n      }\n\n      if (debounceChanged) {\n        onObserversUpdatedDebounced._flush();\n        if (isArray(debounceValue)) {\n          const timeout = debounceValue[0];\n          const maxWait = debounceValue[1];\n          debounceTimeout = isNumber(timeout) && timeout;\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\n        } else if (isNumber(debounceValue)) {\n          debounceTimeout = debounceValue;\n          debounceMaxDelay = false;\n        } else {\n          debounceTimeout = false;\n          debounceMaxDelay = false;\n        }\n      }\n\n      if (takeRecords) {\n        const hostUpdateResult = updateHostMutationObserver();\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\n        const contentUpdateResult =\n          updateContentMutationObserver && updateContentMutationObserver();\n\n        hostUpdateResult &&\n          assignDeep(\n            updateHints,\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\n          );\n\n        trinsicUpdateResult &&\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\n\n        contentUpdateResult &&\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\n      }\n\n      setDirection(updateHints);\n\n      return updateHints;\n    },\n    state,\n  ];\n};\n","import {\n  addClass,\n  appendChildren,\n  createDiv,\n  each,\n  getTrasformTranslateValue,\n  isBoolean,\n  parent,\n  push,\n  removeClass,\n  removeElements,\n  runEachAndClear,\n  scrollT,\n  bind,\n  getElementScroll,\n  numberToCssPx,\n  setStyles,\n  capNumber,\n  getScrollCoordinatesPercent,\n  isDefaultDirectionScrollCoordinates,\n  roundCssNumber,\n} from '~/support';\nimport {\n  classNameScrollbar,\n  classNameScrollbarHorizontal,\n  classNameScrollbarVertical,\n  classNameScrollbarTrack,\n  classNameScrollbarHandle,\n} from '~/classnames';\nimport { getEnvironment } from '~/environment';\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\nimport type { XY } from '~/support';\nimport type {\n  InitializationTarget,\n  InitializationTargetElement,\n  InitializationTargetObject,\n} from '~/initialization';\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\nimport type { StyleObject } from '~/typings';\nimport type { StructureSetupState } from '../structureSetup';\n\nexport interface ScrollbarStructure {\n  _scrollbar: HTMLElement;\n  _track: HTMLElement;\n  _handle: HTMLElement;\n}\n\nexport interface ScrollbarsSetupElement {\n  _scrollbarStructures: ScrollbarStructure[];\n  _clone: () => ScrollbarStructure;\n  _style: (\n    elmStyle: (\n      scrollbarStructure: ScrollbarStructure\n    ) => [HTMLElement | false | null | undefined, StyleObject]\n  ) => void;\n}\n\nexport interface ScrollbarsSetupElementsObj {\n  _scrollbarsAddRemoveClass: (\n    classNames: string | false | null | undefined,\n    add?: boolean,\n    isHorizontal?: boolean\n  ) => void;\n  _refreshScrollbarsHandleLength: () => void;\n  _refreshScrollbarsHandleOffset: () => void;\n  _refreshScrollbarsScrollbarOffset: () => void;\n  _refreshScrollbarsScrollCoordinates: () => void;\n  _horizontal: ScrollbarsSetupElement;\n  _vertical: ScrollbarsSetupElement;\n}\n\nexport type ScrollbarsSetupElements = [\n  elements: ScrollbarsSetupElementsObj,\n  appendElements: () => () => void\n];\n\ntype ScrollbarStyleFn = (\n  scrollbarStructure: ScrollbarStructure\n) => [HTMLElement | false | null | undefined, StyleObject | false | null | undefined];\n\nexport const createScrollbarsSetupElements = (\n  target: InitializationTarget,\n  structureSetupElements: StructureSetupElementsObj,\n  structureSetupState: StructureSetupState,\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\n): ScrollbarsSetupElements => {\n  const cssCustomPropViewportPercent = '--os-viewport-percent';\n  const cssCustomPropScrollPercent = '--os-scroll-percent';\n  const cssCustomPropScrollDirection = '--os-scroll-direction';\n  const { _getDefaultInitialization } = getEnvironment();\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\n  const {\n    _target,\n    _host,\n    _viewport,\n    _targetIsElm,\n    _scrollOffsetElement,\n    _isBody,\n    _viewportIsTarget,\n  } = structureSetupElements;\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\n  const destroyFns: (() => void)[] = [];\n  const horizontalScrollbars: ScrollbarStructure[] = [];\n  const verticalScrollbars: ScrollbarStructure[] = [];\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\n    [InitializationTargetElement, HTMLElement, HTMLElement]\n  >(\n    [_target, _host, _viewport],\n    () => (_viewportIsTarget && _isBody ? _target : _host),\n    defaultInitScrollbarsSlot,\n    initScrollbarsSlot\n  );\n\n  const initScrollTimeline = (axis: keyof XY<unknown>) => {\n    if (scrollT) {\n      const timeline = new scrollT({\n        source: _scrollOffsetElement,\n        axis,\n      });\n\n      const _addScrollPercentAnimation = (structure: ScrollbarStructure) => {\n        const scrollPercentAnimation = structure._scrollbar.animate(\n          {\n            // dummy keyframe which fixes bug where the scrollbar handle is reverted to origin position when it should be at its max position\n            clear: ['left'],\n            [cssCustomPropScrollPercent]: [0, 1],\n          },\n          {\n            timeline,\n          }\n        );\n        return () => scrollPercentAnimation.cancel();\n      };\n\n      return {\n        _addScrollPercentAnimation,\n      };\n    }\n  };\n  const scrollTimeline = {\n    x: initScrollTimeline('x'),\n    y: initScrollTimeline('y'),\n  };\n  const getViewportPercent = () => {\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\n    const getAxisValue = (axisViewportSize: number, axisOverflowAmount: number) =>\n      capNumber(0, 1, axisViewportSize / (axisViewportSize + axisOverflowAmount) || 0);\n\n    return {\n      x: getAxisValue(_overflowEdge.x, _overflowAmount.x),\n      y: getAxisValue(_overflowEdge.y, _overflowAmount.y),\n    };\n  };\n  const scrollbarStructureAddRemoveClass = (\n    scrollbarStructures: ScrollbarStructure[],\n    classNames: string | false | null | undefined,\n    add?: boolean\n  ) => {\n    const action = add ? addClass : removeClass;\n    each(scrollbarStructures, (scrollbarStructure) => {\n      action(scrollbarStructure._scrollbar, classNames);\n    });\n  };\n  const scrollbarStyle = (\n    scrollbarStructures: ScrollbarStructure[],\n    elmStyle: ScrollbarStyleFn\n  ) => {\n    each(scrollbarStructures, (scrollbarStructure) => {\n      const [elm, styles] = elmStyle(scrollbarStructure);\n      setStyles(elm, styles);\n    });\n  };\n  const scrollbarsAddRemoveClass = (\n    className: string | false | null | undefined,\n    add?: boolean,\n    onlyHorizontal?: boolean\n  ) => {\n    const singleAxis = isBoolean(onlyHorizontal);\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\n    const runVertical = singleAxis ? !onlyHorizontal : true;\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\n  };\n  const refreshScrollbarsHandleLength = () => {\n    const viewportPercent = getViewportPercent();\n    const createScrollbarStyleFn =\n      (axisViewportPercent: number): ScrollbarStyleFn =>\n      (structure: ScrollbarStructure) =>\n        [\n          structure._scrollbar,\n          {\n            [cssCustomPropViewportPercent]: roundCssNumber(axisViewportPercent) + '',\n          },\n        ];\n\n    scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(viewportPercent.x));\n    scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(viewportPercent.y));\n  };\n  const refreshScrollbarsHandleOffset = () => {\n    if (!scrollT) {\n      const { _scrollCoordinates } = structureSetupState;\n      const scrollPercent = getScrollCoordinatesPercent(\n        _scrollCoordinates,\n        getElementScroll(_scrollOffsetElement)\n      );\n      const createScrollbarStyleFn =\n        (axisScrollPercent: number): ScrollbarStyleFn =>\n        (structure: ScrollbarStructure) =>\n          [\n            structure._scrollbar,\n            {\n              [cssCustomPropScrollPercent]: roundCssNumber(axisScrollPercent) + '',\n            },\n          ];\n\n      scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(scrollPercent.x));\n      scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(scrollPercent.y));\n    }\n  };\n  const refreshScrollbarsScrollCoordinates = () => {\n    const { _scrollCoordinates } = structureSetupState;\n    const defaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\n    const createScrollbarStyleFn =\n      (axisIsDefaultDirectionScrollCoordinates: boolean): ScrollbarStyleFn =>\n      (structure: ScrollbarStructure) =>\n        [\n          structure._scrollbar,\n          {\n            [cssCustomPropScrollDirection]: axisIsDefaultDirectionScrollCoordinates ? '0' : '1',\n          },\n        ];\n\n    scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(defaultDirectionScroll.x));\n    scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(defaultDirectionScroll.y));\n  };\n  const refreshScrollbarsScrollbarOffset = () => {\n    if (_viewportIsTarget && !_isBody) {\n      const { _overflowAmount, _scrollCoordinates } = structureSetupState;\n      const isDefaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\n      const scrollPercent = getScrollCoordinatesPercent(\n        _scrollCoordinates,\n        getElementScroll(_scrollOffsetElement)\n      );\n      const styleScrollbarPosition: ScrollbarStyleFn = (structure: ScrollbarStructure) => {\n        const { _scrollbar } = structure;\n        const elm = parent(_scrollbar) === _viewport && _scrollbar;\n        const getTranslateValue = (\n          axisScrollPercent: number,\n          axisOverflowAmount: number,\n          axisIsDefaultCoordinates: boolean\n        ) => {\n          const px = axisOverflowAmount * axisScrollPercent;\n          return numberToCssPx(axisIsDefaultCoordinates ? px : -px);\n        };\n\n        return [\n          elm,\n          elm && {\n            transform: getTrasformTranslateValue({\n              x: getTranslateValue(scrollPercent.x, _overflowAmount.x, isDefaultDirectionScroll.x),\n              y: getTranslateValue(scrollPercent.y, _overflowAmount.y, isDefaultDirectionScroll.y),\n            }),\n          },\n        ];\n      };\n\n      scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\n      scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\n    }\n  };\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\n    const xyKey = isHorizontal ? 'x' : 'y';\n    const scrollbarClassName = isHorizontal\n      ? classNameScrollbarHorizontal\n      : classNameScrollbarVertical;\n    const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\n    const track = createDiv(classNameScrollbarTrack);\n    const handle = createDiv(classNameScrollbarHandle);\n    const result = {\n      _scrollbar: scrollbar,\n      _track: track,\n      _handle: handle,\n    };\n    const timeline = scrollTimeline[xyKey];\n\n    push(isHorizontal ? horizontalScrollbars : verticalScrollbars, result);\n    push(destroyFns, [\n      appendChildren(scrollbar, track),\n      appendChildren(track, handle),\n      bind(removeElements, scrollbar),\n      timeline && timeline._addScrollPercentAnimation(result),\n      scrollbarsSetupEvents(result, scrollbarsAddRemoveClass, isHorizontal),\n    ]);\n\n    return result;\n  };\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\n  const appendElements = () => {\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\n\n    return bind(runEachAndClear, destroyFns);\n  };\n\n  generateHorizontalScrollbarStructure();\n  generateVerticalScrollbarStructure();\n\n  return [\n    {\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\n      _refreshScrollbarsScrollCoordinates: refreshScrollbarsScrollCoordinates,\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\n      _horizontal: {\n        _scrollbarStructures: horizontalScrollbars,\n        _clone: generateHorizontalScrollbarStructure,\n        _style: bind(scrollbarStyle, horizontalScrollbars),\n      },\n      _vertical: {\n        _scrollbarStructures: verticalScrollbars,\n        _clone: generateVerticalScrollbarStructure,\n        _style: bind(scrollbarStyle, verticalScrollbars),\n      },\n    },\n    appendElements,\n  ];\n};\n","import {\n  getBoundingClientRect,\n  getOffsetSize,\n  addEventListener,\n  preventDefault,\n  runEachAndClear,\n  selfClearTimeout,\n  parent,\n  closest,\n  push,\n  bind,\n  mathRound,\n  strWidth,\n  strHeight,\n  getElementScroll,\n  scrollElementTo,\n  getFocusedElement,\n  setT,\n  hasAttr,\n  stopAndPrevent,\n  isFunction,\n  mathAbs,\n  focusElement,\n} from '~/support';\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\nimport {\n  classNameScrollbarHandle,\n  classNameScrollbarInteraction,\n  classNameScrollbarWheel,\n  dataAttributeHost,\n  dataAttributeViewport,\n} from '~/classnames';\nimport type { XY } from '~/support';\nimport type { ClickScrollPlugin } from '~/plugins';\nimport type { ReadonlyOptions } from '~/options';\nimport type { StructureSetupState } from '~/setups';\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\n\nexport type ScrollbarsSetupEvents = (\n  scrollbarStructure: ScrollbarStructure,\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\n  isHorizontal?: boolean\n) => () => void;\n\nexport const createScrollbarsSetupEvents = (\n  options: ReadonlyOptions,\n  structureSetupElements: StructureSetupElementsObj,\n  structureSetupState: StructureSetupState,\n  scrollbarHandlePointerInteraction: (event: PointerEvent) => void\n): ScrollbarsSetupEvents => {\n  return (scrollbarStructure, scrollbarsAddRemoveClass, isHorizontal) => {\n    const {\n      _host,\n      _viewport,\n      _viewportIsTarget,\n      _scrollOffsetElement,\n      _documentElm,\n      _removeScrollObscuringStyles,\n    } = structureSetupElements;\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\n    const [scrollSnapScrollTransitionTimeout, clearScrollSnapScrollTransitionTimeout] =\n      selfClearTimeout(444);\n    const scrollOffsetElementScrollBy = (coordinates: XY<number>) => {\n      isFunction(_scrollOffsetElement.scrollBy) &&\n        _scrollOffsetElement.scrollBy({\n          behavior: 'smooth',\n          left: coordinates.x,\n          top: coordinates.y,\n        });\n    };\n\n    const createInteractiveScrollEvents = () => {\n      const releasePointerCaptureEvents = 'pointerup pointercancel lostpointercapture';\n      const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\n      const widthHeightKey = isHorizontal ? strWidth : strHeight;\n      const leftTopKey = isHorizontal ? 'left' : 'top';\n      const whKey = isHorizontal ? 'w' : 'h';\n      const xyKey = isHorizontal ? 'x' : 'y';\n\n      const createRelativeHandleMove =\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\n          const { _overflowAmount } = structureSetupState;\n          const handleTrackDiff = getOffsetSize(_track)[whKey] - getOffsetSize(_handle)[whKey];\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\n\n          scrollElementTo(_scrollOffsetElement, {\n            [xyKey]: mouseDownScroll + scrollDelta,\n          });\n        };\n      const pointerdownCleanupFns: Array<() => void> = [];\n\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\n        const isDragScroll =\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\n\n        const scrollbarOptions = options.scrollbars;\n        const dragClickScrollOption = scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'];\n        const { button, isPrimary, pointerType } = pointerDownEvent;\n        const { pointers } = scrollbarOptions;\n\n        const continuePointerDown =\n          button === 0 &&\n          isPrimary &&\n          dragClickScrollOption &&\n          (pointers || []).includes(pointerType);\n\n        if (continuePointerDown) {\n          runEachAndClear(pointerdownCleanupFns);\n          clearScrollSnapScrollTransitionTimeout();\n\n          const instantClickScroll =\n            !isDragScroll && (pointerDownEvent.shiftKey || dragClickScrollOption === 'instant');\n          const getHandleRect = bind(getBoundingClientRect, _handle);\n          const getTrackRect = bind(getBoundingClientRect, _track);\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\n          const axisScale =\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\n              getOffsetSize(_scrollOffsetElement)[whKey] || 1;\n          const moveHandleRelative = createRelativeHandleMove(\n            getElementScroll(_scrollOffsetElement)[xyKey],\n            1 / axisScale\n          );\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\n          const handleRect = getHandleRect();\n          const trackRect = getTrackRect();\n          const handleLength = handleRect[widthHeightKey];\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            runEachAndClear(pointerupCleanupFns);\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\n          };\n          const nonAnimatedScroll = isDragScroll || instantClickScroll;\n          const revertScrollObscuringStyles = _removeScrollObscuringStyles();\n\n          const pointerupCleanupFns = [\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\n              _passive: false,\n            }),\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\n            nonAnimatedScroll &&\n              addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) =>\n                moveHandleRelative(\n                  startOffset + (pointerMoveEvent[clientXYKey] - pointerDownOffset)\n                )\n              ),\n            nonAnimatedScroll &&\n              (() => {\n                const withoutSnapScrollOffset = getElementScroll(_scrollOffsetElement);\n                revertScrollObscuringStyles();\n                const withSnapScrollOffset = getElementScroll(_scrollOffsetElement);\n                const snapScrollDiff = {\n                  x: withSnapScrollOffset.x - withoutSnapScrollOffset.x,\n                  y: withSnapScrollOffset.y - withoutSnapScrollOffset.y,\n                };\n\n                if (mathAbs(snapScrollDiff.x) > 3 || mathAbs(snapScrollDiff.y) > 3) {\n                  _removeScrollObscuringStyles();\n                  scrollElementTo(_scrollOffsetElement, withoutSnapScrollOffset);\n                  scrollOffsetElementScrollBy(snapScrollDiff);\n                  scrollSnapScrollTransitionTimeout(revertScrollObscuringStyles);\n                }\n              }),\n          ];\n\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\n\n          if (instantClickScroll) {\n            moveHandleRelative(startOffset);\n          } else if (!isDragScroll) {\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\n              clickScrollPluginModuleName\n            );\n            if (animateClickScroll) {\n              const stopClickScrollAnimation = animateClickScroll(\n                moveHandleRelative,\n                startOffset,\n                handleLength,\n                (stopped) => {\n                  // if the scroll animation doesn't continue with a press\n                  if (stopped) {\n                    revertScrollObscuringStyles();\n                  } else {\n                    push(pointerupCleanupFns, revertScrollObscuringStyles);\n                  }\n                }\n              );\n\n              push(pointerupCleanupFns, stopClickScrollAnimation);\n              push(pointerdownCleanupFns, bind(stopClickScrollAnimation, true));\n            }\n          }\n        }\n      });\n    };\n\n    let wheelScrollBy = true;\n\n    return bind(runEachAndClear, [\n      addEventListener(_handle, 'pointermove pointerleave', scrollbarHandlePointerInteraction),\n      addEventListener(_scrollbar, 'pointerenter', () => {\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\n      }),\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\n      }),\n      // focus viewport when clicking on a scrollbar (mouse only)\n      !_viewportIsTarget &&\n        addEventListener(_scrollbar, 'mousedown', () => {\n          const focusedElement = getFocusedElement();\n          if (\n            hasAttr(focusedElement, dataAttributeViewport) ||\n            hasAttr(focusedElement, dataAttributeHost) ||\n            focusedElement === document.body\n          ) {\n            setT(bind(focusElement, _viewport), 25);\n          }\n        }),\n      // propagate wheel events to viewport when mouse is over scrollbar\n      addEventListener(\n        _scrollbar,\n        'wheel',\n        (wheelEvent: WheelEvent) => {\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\n\n          // the first wheel event is swallowed, simulate scroll to compensate for it\n          if (wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\n            scrollOffsetElementScrollBy({\n              x: deltaX,\n              y: deltaY,\n            });\n          }\n\n          wheelScrollBy = false;\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\n          wheelTimeout(() => {\n            wheelScrollBy = true;\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\n          });\n\n          preventDefault(wheelEvent);\n        },\n        { _passive: false, _capture: true }\n      ),\n      // solve problem of interaction causing click events\n      addEventListener(\n        _scrollbar,\n        'pointerdown',\n        // stopPropagation for stopping event propagation (causing click listeners to be invoked)\n        // preventDefault to prevent the pointer to cause any actions (e.g. releasing mouse button over an <a> tag causes an navigation)\n        bind(addEventListener, _documentElm, 'click', stopAndPrevent, {\n          _once: true,\n          _capture: true,\n          _passive: false,\n        }),\n        { _capture: true }\n      ),\n      createInteractiveScrollEvents(),\n      clearWheelTimeout,\n      clearScrollSnapScrollTransitionTimeout,\n    ]);\n  };\n};\n","import {\n  bind,\n  noop,\n  addEventListener,\n  push,\n  runEachAndClear,\n  selfClearTimeout,\n  strScroll,\n  strVisible,\n} from '~/support';\nimport { getEnvironment } from '~/environment';\nimport {\n  classNameScrollbarThemeNone,\n  classNameScrollbarVisible,\n  classNameScrollbarUnusable,\n  classNameScrollbarCornerless,\n  classNameScrollbarAutoHideHidden,\n  classNameScrollbarHandleInteractive,\n  classNameScrollbarTrackInteractive,\n  classNameScrollbarRtl,\n  classNameScrollbarAutoHide,\n} from '~/classnames';\nimport type { OverflowBehavior, ReadonlyOptions } from '~/options';\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\nimport type {\n  ObserversSetupState,\n  ObserversSetupUpdateHints,\n  Setup,\n  SetupUpdateInfo,\n  StructureSetupState,\n  StructureSetupUpdateHints,\n} from '~/setups';\nimport type { InitializationTarget } from '~/initialization';\nimport type { OverflowStyle } from '~/typings';\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ScrollbarsSetupState {}\n\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\n  _observersUpdateHints?: ObserversSetupUpdateHints;\n  _structureUpdateHints?: StructureSetupUpdateHints;\n}\n\nexport type ScrollbarsSetup = [\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\n  /** The elements created by the scrollbars setup. */\n  ScrollbarsSetupElementsObj\n];\n\nexport const createScrollbarsSetup = (\n  target: InitializationTarget,\n  options: ReadonlyOptions,\n  observersSetupState: ObserversSetupState,\n  structureSetupState: StructureSetupState,\n  structureSetupElements: StructureSetupElementsObj,\n  onScroll: (event: Event) => void\n): ScrollbarsSetup => {\n  let mouseInHost: boolean | undefined;\n  let autoHideIsMove: boolean | undefined;\n  let autoHideIsLeave: boolean | undefined;\n  let autoHideIsNever: boolean | undefined;\n  let prevTheme: string | null | undefined;\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\n  let instanceAutoHideDelay = 0;\n\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\n\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\n  const [autoHideInstantInteractionTimeout, clearAutoHideInstantInteractionTimeout] =\n    selfClearTimeout(100);\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\n  const [auotHideTimeout, clearAutoHideTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\n  const [elements, appendElements] = createScrollbarsSetupElements(\n    target,\n    structureSetupElements,\n    structureSetupState,\n    createScrollbarsSetupEvents(\n      options,\n      structureSetupElements,\n      structureSetupState,\n      (event) =>\n        isHoverablePointerType(event) &&\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        manageScrollbarsAutoHideInstantInteraction()\n    )\n  );\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\n  const {\n    _scrollbarsAddRemoveClass,\n    _refreshScrollbarsHandleLength,\n    _refreshScrollbarsHandleOffset,\n    _refreshScrollbarsScrollCoordinates,\n    _refreshScrollbarsScrollbarOffset,\n  } = elements;\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\n    clearAutoHideTimeout();\n    if (removeAutoHide) {\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\n    } else {\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\n      if (instanceAutoHideDelay > 0 && !delayless) {\n        auotHideTimeout(hide);\n      } else {\n        hide();\n      }\n    }\n  };\n  const manageScrollbarsAutoHideInstantInteraction = () => {\n    if (autoHideIsLeave ? !mouseInHost : !autoHideIsNever) {\n      manageScrollbarsAutoHide(true);\n      autoHideInstantInteractionTimeout(() => {\n        manageScrollbarsAutoHide(false);\n      });\n    }\n  };\n  const manageAutoHideSuspension = (add: boolean) => {\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\n  };\n  const onHostMouseEnter = (event: PointerEvent) => {\n    if (isHoverablePointerType(event)) {\n      mouseInHost = autoHideIsLeave;\n      autoHideIsLeave && manageScrollbarsAutoHide(true);\n    }\n  };\n  const destroyFns: (() => void)[] = [\n    clearAutoHideTimeout,\n    clearAutoHideInstantInteractionTimeout,\n    clearAutoHideSuspendTimeout,\n    cancelScrollAnimationFrame,\n    () => instanceAutoHideSuspendScrollDestroyFn(),\n\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\n      if (isHoverablePointerType(event)) {\n        mouseInHost = false;\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\n      }\n    }),\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\n      isHoverablePointerType(event) &&\n        autoHideIsMove &&\n        manageScrollbarsAutoHideInstantInteraction();\n    }),\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\n      requestScrollAnimationFrame(() => {\n        _refreshScrollbarsHandleOffset();\n        manageScrollbarsAutoHideInstantInteraction();\n      });\n\n      onScroll(event);\n\n      _refreshScrollbarsScrollbarOffset();\n    }),\n  ];\n\n  return [\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\n      const {\n        _overflowEdgeChanged,\n        _overflowAmountChanged,\n        _overflowStyleChanged,\n        _scrollCoordinatesChanged,\n      } = _structureUpdateHints || {};\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\n      const { _directionIsRTL } = observersSetupState;\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\n      const { _overflowStyle, _hasOverflow } = structureSetupState;\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\n        _checkOption('showNativeOverlaidScrollbars');\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\n      const [overflow, overflowChanged] = _checkOption('overflow');\n      const trulyAppeared = _appear && !_force;\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\n      const updateScrollbars =\n        _overflowEdgeChanged ||\n        _overflowAmountChanged ||\n        _scrollCoordinatesChanged ||\n        _directionChanged ||\n        _force;\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || overflowChanged;\n      const showNativeOverlaidScrollbars =\n        showNativeOverlaidScrollbarsOption &&\n        _nativeScrollbarsOverlaid.x &&\n        _nativeScrollbarsOverlaid.y;\n\n      const setScrollbarVisibility = (\n        overflowBehavior: OverflowBehavior,\n        overflowStyle: OverflowStyle,\n        isHorizontal: boolean\n      ) => {\n        const isVisible =\n          overflowBehavior.includes(strScroll) &&\n          (visibility === strVisible || (visibility === 'auto' && overflowStyle === strScroll));\n\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\n\n        return isVisible;\n      };\n\n      instanceAutoHideDelay = autoHideDelay;\n\n      if (trulyAppeared) {\n        if (autoHideSuspend && hasOverflow) {\n          manageAutoHideSuspension(false);\n          instanceAutoHideSuspendScrollDestroyFn();\n          autoHideSuspendTimeout(() => {\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\n              _scrollEventElement,\n              'scroll',\n              bind(manageAutoHideSuspension, true),\n              {\n                _once: true,\n              }\n            );\n          });\n        } else {\n          manageAutoHideSuspension(true);\n        }\n      }\n\n      if (showNativeOverlaidScrollbarsChanged) {\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\n      }\n\n      if (themeChanged) {\n        _scrollbarsAddRemoveClass(prevTheme);\n        _scrollbarsAddRemoveClass(theme, true);\n\n        prevTheme = theme;\n      }\n\n      if (autoHideSuspendChanged && !autoHideSuspend) {\n        manageAutoHideSuspension(true);\n      }\n\n      if (autoHideChanged) {\n        autoHideIsMove = autoHide === 'move';\n        autoHideIsLeave = autoHide === 'leave';\n        autoHideIsNever = autoHide === 'never';\n        manageScrollbarsAutoHide(autoHideIsNever, true);\n      }\n\n      if (dragScrollChanged) {\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\n      }\n\n      if (clickScrollChanged) {\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, !!clickScroll);\n      }\n\n      // always update scrollbar visibility before scrollbar size\n      // the scrollbar size is influenced whether both or just one scrollbar is visible (because of the corner element)\n      if (updateVisibility) {\n        const xVisible = setScrollbarVisibility(overflow.x, _overflowStyle.x, true);\n        const yVisible = setScrollbarVisibility(overflow.y, _overflowStyle.y, false);\n        const hasCorner = xVisible && yVisible;\n\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\n      }\n\n      // always update scrollbar sizes after the visibility\n      if (updateScrollbars) {\n        _refreshScrollbarsHandleOffset();\n        _refreshScrollbarsHandleLength();\n        _refreshScrollbarsScrollbarOffset();\n        _scrollCoordinatesChanged && _refreshScrollbarsScrollCoordinates();\n\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.x, true);\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.y, false);\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\n      }\n    },\n    {},\n    elements,\n  ];\n};\n","import {\n  isHTMLElement,\n  appendChildren,\n  createDiv,\n  contents,\n  parent,\n  removeElements,\n  push,\n  runEachAndClear,\n  removeAttrs,\n  hasAttrClass,\n  addEventListener,\n  bind,\n  inArray,\n  addAttrClass,\n  addRemoveAttrClass,\n  setAttrs,\n  getAttr,\n  isBodyElement,\n  getFocusedElement,\n  wnd,\n  focusElement,\n  stopAndPrevent,\n  getOffsetSize,\n  getScrollSize,\n  getStyles,\n  strOverflowX,\n  strOverflowY,\n} from '~/support';\nimport {\n  dataAttributeHost,\n  dataAttributeInitialize,\n  dataAttributeViewport,\n  dataValueViewportScrollbarHidden,\n  dataAttributePadding,\n  dataAttributeContent,\n  dataAttributeHtmlBody,\n  dataValueHostIsHost,\n  dataValueViewportScrolling,\n} from '~/classnames';\nimport { getEnvironment } from '~/environment';\nimport {\n  staticInitializationElement as generalStaticInitializationElement,\n  dynamicInitializationElement as generalDynamicInitializationElement,\n} from '~/initialization';\nimport type {\n  InitializationTarget,\n  InitializationTargetElement,\n  InitializationTargetObject,\n} from '~/initialization';\nimport { overflowIsVisible } from './structureSetup.utils';\n\nexport type StructureSetupElements = [\n  elements: StructureSetupElementsObj,\n  appendElements: () => () => void,\n  canceled: () => void\n];\n\nexport interface StructureSetupElementsObj {\n  _target: InitializationTargetElement;\n  _host: HTMLElement;\n  _viewport: HTMLElement;\n  _padding: HTMLElement | false;\n  _content: HTMLElement | false;\n  _scrollOffsetElement: HTMLElement;\n  _scrollEventElement: HTMLElement | Document;\n  _originalScrollOffsetElement: HTMLElement;\n  // ctx ----\n  _isBody: boolean;\n  _documentElm: Document;\n  _targetIsElm: boolean;\n  _viewportIsTarget: boolean;\n  _windowElm: () => Window;\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => () => void;\n  _removeScrollObscuringStyles: () => () => void;\n}\n\nexport const createStructureSetupElements = (\n  target: InitializationTarget\n): StructureSetupElements => {\n  const env = getEnvironment();\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\n  const { elements: defaultInitElements } = _getDefaultInitialization();\n  const {\n    padding: defaultPaddingInitialization,\n    viewport: defaultViewportInitialization,\n    content: defaultContentInitialization,\n  } = defaultInitElements;\n  const targetIsElm = isHTMLElement(target);\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\n  const { elements: initElements } = targetStructureInitialization;\n  const {\n    padding: paddingInitialization,\n    viewport: viewportInitialization,\n    content: contentInitialization,\n  } = initElements || {};\n\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\n  const isBody = isBodyElement(targetElement);\n  const ownerDocument = targetElement.ownerDocument;\n  const docElement = ownerDocument.documentElement;\n  const getDocumentWindow = () => ownerDocument.defaultView || wnd;\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\n  const createNewDiv = bind(createDiv, '');\n  const generateViewportElement = bind(\n    staticInitializationElement,\n    createNewDiv,\n    defaultViewportInitialization\n  );\n  const generateContentElement = bind(\n    dynamicInitializationElement,\n    createNewDiv,\n    defaultContentInitialization\n  );\n  const elementHasOverflow = (elm: HTMLElement) => {\n    const offsetSize = getOffsetSize(elm);\n    const scrollSize = getScrollSize(elm);\n    const overflowX = getStyles(elm, strOverflowX);\n    const overflowY = getStyles(elm, strOverflowY);\n\n    return (\n      (scrollSize.w - offsetSize.w > 0 && !overflowIsVisible(overflowX)) ||\n      (scrollSize.h - offsetSize.h > 0 && !overflowIsVisible(overflowY))\n    );\n  };\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\n  const viewportIsTarget = possibleViewportElement === targetElement;\n  const viewportIsTargetBody = viewportIsTarget && isBody;\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\n  // edge case if passed viewportElement is contentElement:\n  // viewport element has higher priority and content element will not be generated\n  // will act the same way as initialization: `{ elements: { viewport, content: false } }`\n  const viewportIsContent = !viewportIsTarget && possibleViewportElement === possibleContentElement;\n  const viewportElement = viewportIsTargetBody ? docElement : possibleViewportElement;\n  const hostElement = viewportIsTargetBody ? viewportElement : targetElement;\n  const paddingElement =\n    !viewportIsTarget &&\n    dynamicInitializationElement(createNewDiv, defaultPaddingInitialization, paddingInitialization);\n  const contentElement = !viewportIsContent && possibleContentElement;\n  const generatedElements = [contentElement, viewportElement, paddingElement, hostElement].map(\n    (elm) => isHTMLElement(elm) && !parent(elm) && elm\n  );\n  const elementIsGenerated = (elm: HTMLElement | false) => elm && inArray(generatedElements, elm);\n  const originalNonBodyScrollOffsetElement =\n    !elementIsGenerated(viewportElement) && elementHasOverflow(viewportElement)\n      ? viewportElement\n      : targetElement;\n  const scrollOffsetElement = viewportIsTargetBody ? docElement : viewportElement;\n  const scrollEventElement = viewportIsTargetBody ? ownerDocument : viewportElement;\n\n  const evaluatedTargetObj: StructureSetupElementsObj = {\n    _target: targetElement,\n    _host: hostElement,\n    _viewport: viewportElement,\n    _padding: paddingElement,\n    _content: contentElement,\n    _scrollOffsetElement: scrollOffsetElement,\n    _scrollEventElement: scrollEventElement,\n    _originalScrollOffsetElement: isBody ? docElement : originalNonBodyScrollOffsetElement,\n    _documentElm: ownerDocument,\n    _isBody: isBody,\n    _targetIsElm: targetIsElm,\n    _viewportIsTarget: viewportIsTarget,\n    _windowElm: getDocumentWindow,\n    _viewportHasClass: (viewportAttributeClassName: string) =>\n      hasAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName),\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\n      addRemoveAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName, add),\n    _removeScrollObscuringStyles: () =>\n      addRemoveAttrClass(\n        scrollOffsetElement,\n        dataAttributeViewport,\n        dataValueViewportScrolling,\n        true\n      ),\n  };\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\n  const destroyFns: (() => any)[] = [\n    () => {\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\n      removeAttrs(_target, dataAttributeInitialize);\n      if (isBody) {\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\n      }\n    },\n  ];\n  let targetContents = contents(\n    [_content, _viewport, _padding, _host, _target].find((elm) => elm && !elementIsGenerated(elm))\n  );\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\n  const destroy = bind(runEachAndClear, destroyFns);\n  const appendElements = () => {\n    const docWnd = getDocumentWindow();\n    const initActiveElm = getFocusedElement();\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\n      appendChildren(parent(elm), contents(elm));\n      removeElements(elm);\n    };\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\n    const prepareWrapUnwrapFocus = (activeElement: Element | false | null | undefined) =>\n      addEventListener(activeElement, 'focusin focusout focus blur', stopAndPrevent, {\n        _capture: true,\n        _passive: false,\n      });\n    const tabIndexStr = 'tabindex';\n    const originalViewportTabIndex = getAttr(_viewport, tabIndexStr);\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? '' : dataValueHostIsHost);\n    setAttrs(_padding, dataAttributePadding, '');\n    setAttrs(_viewport, dataAttributeViewport, '');\n    setAttrs(_content, dataAttributeContent, '');\n\n    if (!viewportIsTarget) {\n      setAttrs(_viewport, tabIndexStr, originalViewportTabIndex || '-1');\n      isBody && setAttrs(docElement, dataAttributeHtmlBody, '');\n    }\n\n    appendChildren(contentSlot, targetContents);\n    appendChildren(_host, _padding);\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\n    appendChildren(_viewport, _content);\n\n    push(destroyFns, [\n      undoInitWrapUndwrapFocus,\n      () => {\n        const destroyActiveElm = getFocusedElement();\n        const viewportIsGenerated = elementIsGenerated(_viewport);\n        // if the focused element is viewport and viewport will be destroyed shift the focus to target\n        // otherwise keep the focused element\n        const destroyFocusElement =\n          viewportIsGenerated && destroyActiveElm === _viewport ? _target : destroyActiveElm;\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyFocusElement);\n        removeAttrs(_padding, dataAttributePadding);\n        removeAttrs(_content, dataAttributeContent);\n        removeAttrs(_viewport, dataAttributeViewport);\n        isBody && removeAttrs(docElement, dataAttributeHtmlBody);\n        originalViewportTabIndex\n          ? setAttrs(_viewport, tabIndexStr, originalViewportTabIndex)\n          : removeAttrs(_viewport, tabIndexStr);\n\n        elementIsGenerated(_content) && unwrap(_content);\n        viewportIsGenerated && unwrap(_viewport);\n        elementIsGenerated(_padding) && unwrap(_padding);\n        focusElement(destroyFocusElement);\n        undoDestroyWrapUndwrapFocus();\n      },\n    ]);\n\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\n    }\n\n    // keep the original focused element focused except when\n    // the target is body and viewport is not target, then shift the focus to the viewport element\n    focusElement(\n      !viewportIsTarget && isBody && initActiveElm === _target && docWnd.top === docWnd\n        ? _viewport\n        : initActiveElm\n    );\n    undoInitWrapUndwrapFocus();\n\n    // @ts-ignore\n    targetContents = 0;\n\n    return destroy;\n  };\n\n  return [evaluatedTargetObj, appendElements, destroy];\n};\n","import { setStyles, strHeight } from '~/support';\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\n\n/**\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\n * @param structureUpdateHub\n * @returns\n */\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\n  ({ _content }) =>\n  ({ _observersUpdateHints, _observersState, _force }) => {\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\n    const { _heightIntrinsic } = _observersState;\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\n\n    if (heightIntrinsicChanged) {\n      setStyles(_content, {\n        [strHeight]: _heightIntrinsic && '100%',\n      });\n    }\n  };\n","import {\n  createCache,\n  topRightBottomLeft,\n  equalTRBL,\n  assignDeep,\n  bind,\n  strMarginBottom,\n  strMarginLeft,\n  strMarginRight,\n  strPaddingBottom,\n  strPaddingLeft,\n  strPaddingRight,\n  strPaddingTop,\n  strWidth,\n  setStyles,\n} from '~/support';\nimport { getEnvironment } from '~/environment';\nimport type { StyleObject } from '~/typings';\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\n\n/**\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\n * @param structureUpdateHub\n * @returns\n */\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\n  { _host, _padding, _viewport, _viewportIsTarget },\n  state\n) => {\n  const [updatePaddingCache, currentPaddingCache] = createCache(\n    {\n      _equal: equalTRBL,\n      _initialValue: topRightBottomLeft(),\n    },\n    bind(topRightBottomLeft, _host, 'padding', '')\n  );\n\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\n    let [padding, paddingChanged] = currentPaddingCache(_force);\n    const { _nativeScrollbarsHiding } = getEnvironment();\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\n    const { _directionIsRTL } = _observersState;\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\n    const contentMutation = _force || _contentMutation;\n\n    if (_sizeChanged || paddingChanged || contentMutation) {\n      [padding, paddingChanged] = updatePaddingCache(_force);\n    }\n\n    const paddingStyleChanged =\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\n\n    if (paddingStyleChanged) {\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\n      const paddingHorizontal = padding.r + padding.l;\n      const paddingVertical = padding.t + padding.b;\n\n      const paddingStyle: StyleObject = {\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\n        top: paddingRelative ? -padding.t : 0,\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\n      };\n      const viewportStyle: StyleObject = {\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\n      };\n\n      // if there is no padding element apply the style to the viewport element instead\n      setStyles(_padding || _viewport, paddingStyle);\n      setStyles(_viewport, viewportStyle);\n\n      assignDeep(state, {\n        _padding: padding,\n        _paddingAbsolute: !paddingRelative,\n        _viewportPaddingStyle: _padding\n          ? viewportStyle\n          : assignDeep({}, paddingStyle, viewportStyle),\n      });\n    }\n\n    return {\n      _paddingStyleChanged: paddingStyleChanged,\n    };\n  };\n};\n","import {\n  createCache,\n  getScrollSize,\n  getFractionalSize,\n  equalWH,\n  getClientSize,\n  equalXY,\n  assignDeep,\n  bind,\n  wnd,\n  mathMax,\n  getWindowSize,\n  addRemoveAttrClass,\n  capitalizeFirstLetter,\n  setStyles,\n  strVisible,\n  strHidden,\n  keys,\n  strScroll,\n  scrollElementTo,\n  getElementScroll,\n  sanitizeScrollCoordinates,\n  getStyles,\n  equal,\n  getZeroScrollCoordinates,\n  hasDimensions,\n  addEventListener,\n  stopPropagation,\n  rAF,\n  hasAttrClass,\n} from '~/support';\nimport { getEnvironment } from '~/environment';\nimport {\n  dataAttributeHost,\n  dataValueNoClipping,\n  dataValueViewportScrollbarHidden,\n  dataAttributePadding,\n  dataValueViewportOverflowXPrefix,\n  dataValueViewportOverflowYPrefix,\n  dataValueViewportNoContent,\n  dataValueViewportMeasuring,\n} from '~/classnames';\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\nimport type { ScrollCoordinates, WH, XY } from '~/support';\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\nimport type { OverflowStyle } from '~/typings';\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\nimport {\n  createViewportOverflowState,\n  getShowNativeOverlaidScrollbars,\n  overflowIsVisible,\n} from '../structureSetup.utils';\n\ninterface FlowDirectionStyles {\n  display?: string;\n  direction?: string;\n  flexDirection?: string;\n  writingMode?: string;\n}\n\n/**\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\n * @param structureUpdateHub\n * @returns\n */\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\n  structureSetupElements,\n  structureSetupState\n) => {\n  const env = getEnvironment();\n  const {\n    _host,\n    _padding,\n    _viewport,\n    _viewportIsTarget,\n    _scrollEventElement,\n    _scrollOffsetElement,\n    _isBody,\n    _viewportAddRemoveClass,\n    _windowElm,\n  } = structureSetupElements;\n  const { _nativeScrollbarsHiding } = env;\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\n  const max0 = bind(mathMax, 0);\n  const flowDirectionCanBeNonDefaultMap: Record<\n    keyof FlowDirectionStyles,\n    (styleValue: string) => boolean\n  > = {\n    display: () => false,\n    direction: (directionStyle) => directionStyle !== 'ltr',\n    flexDirection: (flexDirectionStyle) => flexDirectionStyle.endsWith('-reverse'),\n    writingMode: (writingModeStyle) => writingModeStyle !== 'horizontal-tb',\n  };\n  const flowDirectionStyleArr = keys(flowDirectionCanBeNonDefaultMap) as Array<\n    keyof FlowDirectionStyles\n  >;\n  const whCacheOptions = {\n    _equal: equalWH,\n    _initialValue: { w: 0, h: 0 },\n  };\n  const partialXYOptions = {\n    _equal: equalXY,\n    _initialValue: {},\n  };\n\n  const setMeasuringMode = (active: boolean) => {\n    // viewportIsTargetBody never needs measuring\n    _viewportAddRemoveClass(dataValueViewportMeasuring, !viewportIsTargetBody && active);\n  };\n\n  const getMeasuredScrollCoordinates = (flowDirectionStyles: FlowDirectionStyles) => {\n    const flowDirectionCanBeNonDefault = flowDirectionStyleArr.some((styleName) => {\n      const styleValue = flowDirectionStyles[styleName];\n      return styleValue && flowDirectionCanBeNonDefaultMap[styleName](styleValue);\n    });\n\n    // if the direction can not be non-default return default scroll coordinates (only the sign of the numbers matters)\n    if (!flowDirectionCanBeNonDefault) {\n      return {\n        _start: { x: 0, y: 0 },\n        _end: { x: 1, y: 1 },\n      };\n    }\n\n    setMeasuringMode(true);\n\n    const originalScrollOffset = getElementScroll(_scrollOffsetElement);\n    const removeNoContent = _viewportAddRemoveClass(dataValueViewportNoContent, true);\n    const removeScrollBlock = addEventListener(\n      _scrollEventElement,\n      strScroll,\n      (event) => {\n        const scrollEventScrollOffset = getElementScroll(_scrollOffsetElement);\n        // if scroll offset didnt change\n        if (\n          event.isTrusted &&\n          scrollEventScrollOffset.x === originalScrollOffset.x &&\n          scrollEventScrollOffset.y === originalScrollOffset.y\n        ) {\n          stopPropagation(event);\n        }\n      },\n      {\n        _capture: true,\n        _once: true,\n      }\n    );\n\n    scrollElementTo(_scrollOffsetElement, {\n      x: 0,\n      y: 0,\n    });\n    removeNoContent();\n\n    const _start = getElementScroll(_scrollOffsetElement);\n    const scrollSize = getScrollSize(_scrollOffsetElement);\n    scrollElementTo(_scrollOffsetElement, {\n      x: scrollSize.w,\n      y: scrollSize.h,\n    });\n\n    const tmp = getElementScroll(_scrollOffsetElement);\n    scrollElementTo(_scrollOffsetElement, {\n      // if tmp is very close start there porbably wasn't any scroll happening so scroll again in different direction\n      x: tmp.x - _start.x < 1 && -scrollSize.w,\n      y: tmp.y - _start.y < 1 && -scrollSize.h,\n    });\n\n    const _end = getElementScroll(_scrollOffsetElement);\n    scrollElementTo(_scrollOffsetElement, originalScrollOffset);\n    rAF(() => removeScrollBlock());\n\n    return {\n      _start,\n      _end,\n    };\n  };\n  const getOverflowAmount = (\n    viewportScrollSize: WH<number>,\n    viewportClientSize: WH<number>\n  ): WH<number> => {\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\n    const amount = {\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\n    };\n\n    return {\n      w: amount.w > tollerance ? amount.w : 0,\n      h: amount.h > tollerance ? amount.h : 0,\n    };\n  };\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\n    whCacheOptions,\n    bind(getFractionalSize, _viewport)\n  );\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\n    WH<number>\n  >(whCacheOptions, bind(getScrollSize, _viewport));\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\n    createCache<WH<number>>(whCacheOptions);\n  const [updateHasOverflowCache] = createCache<Partial<XY<boolean>>>(partialXYOptions);\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\n  const [updateOverflowStyleCache] = createCache<Partial<XY<OverflowStyle>>>(partialXYOptions);\n  const [updateFlowDirectionStyles] = createCache<FlowDirectionStyles>(\n    {\n      _equal: (currVal, newValu) => equal(currVal, newValu, flowDirectionStyleArr),\n      _initialValue: {},\n    },\n    () => (hasDimensions(_viewport) ? getStyles(_viewport, flowDirectionStyleArr) : {})\n  );\n  const [updateMeasuredScrollCoordinates, getCurrentMeasuredScrollCoordinates] =\n    createCache<ScrollCoordinates>({\n      _equal: (currVal, newVal) =>\n        equalXY(currVal._start, newVal._start) && equalXY(currVal._end, newVal._end),\n      _initialValue: getZeroScrollCoordinates(),\n    });\n\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\n    scrollbarsHidingPluginName\n  );\n\n  const createViewportOverflowStyleClassName = (\n    overflowStyle: OverflowStyle,\n    isHorizontal?: boolean\n  ) => {\n    const prefix = isHorizontal\n      ? dataValueViewportOverflowXPrefix\n      : dataValueViewportOverflowYPrefix;\n    return `${prefix}${capitalizeFirstLetter(overflowStyle)}`;\n  };\n  const setViewportOverflowStyle = (viewportOverflowStyle: XY<OverflowStyle>) => {\n    // `createAllOverflowStyleClassNames` and `allOverflowStyleClassNames` could be one scope further up but would increase bundle size\n    const createAllOverflowStyleClassNames = (isHorizontal?: boolean) =>\n      ([strVisible, strHidden, strScroll] as OverflowStyle[]).map((style) =>\n        createViewportOverflowStyleClassName(style, isHorizontal)\n      );\n    const allOverflowStyleClassNames = createAllOverflowStyleClassNames(true)\n      .concat(createAllOverflowStyleClassNames())\n      .join(' ');\n\n    _viewportAddRemoveClass(allOverflowStyleClassNames);\n    _viewportAddRemoveClass(\n      (keys(viewportOverflowStyle) as Array<keyof typeof viewportOverflowStyle>)\n        .map((axis) =>\n          createViewportOverflowStyleClassName(viewportOverflowStyle[axis], axis === 'x')\n        )\n        .join(' '),\n      true\n    );\n  };\n\n  return (\n    { _checkOption, _observersUpdateHints, _observersState, _force },\n    { _paddingStyleChanged }\n  ) => {\n    const { _sizeChanged, _contentMutation, _directionChanged, _appear, _scrollbarSizeChanged } =\n      _observersUpdateHints || {};\n    const scrollbarsHidingPluginViewportArrangement =\n      scrollbarsHidingPlugin &&\n      scrollbarsHidingPlugin._viewportArrangement(\n        structureSetupElements,\n        structureSetupState,\n        _observersState,\n        env,\n        _checkOption\n      );\n\n    const { _arrangeViewport, _undoViewportArrange, _hideNativeScrollbars } =\n      scrollbarsHidingPluginViewportArrangement || {};\n\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\n      getShowNativeOverlaidScrollbars(_checkOption, env);\n    const [overflow, overflowChanged] = _checkOption('overflow');\n    const overflowXVisible = overflowIsVisible(overflow.x);\n    const overflowYVisible = overflowIsVisible(overflow.y);\n\n    const viewportChanged =\n      true ||\n      _sizeChanged ||\n      _paddingStyleChanged ||\n      _contentMutation ||\n      _directionChanged ||\n      _scrollbarSizeChanged ||\n      showNativeOverlaidScrollbarsChanged;\n\n    let sizeFractionCache = getCurrentSizeFraction(_force);\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\n\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\n    }\n\n    if (viewportChanged) {\n      if (hasAttrClass(_host, dataAttributeHost, dataValueNoClipping)) {\n        setMeasuringMode(true);\n      }\n\n      const [redoViewportArrange] = _undoViewportArrange ? _undoViewportArrange() : [];\n\n      const [sizeFraction] = (sizeFractionCache = updateSizeFraction(_force));\n      const [viewportScrollSize] = (viewportScrollSizeCache =\n        updateViewportScrollSizeCache(_force));\n      const viewportClientSize = getClientSize(_viewport);\n      const windowInnerSize = viewportIsTargetBody && getWindowSize(_windowElm());\n      const overflowAmountScrollSize = {\n        w: max0(viewportScrollSize.w + sizeFraction.w),\n        h: max0(viewportScrollSize.h + sizeFraction.h),\n      };\n\n      const overflowAmountClientSize = {\n        w: max0(\n          (windowInnerSize\n            ? windowInnerSize.w\n            : viewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\n            sizeFraction.w\n        ),\n        h: max0(\n          (windowInnerSize\n            ? windowInnerSize.h\n            : viewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\n            sizeFraction.h\n        ),\n      };\n\n      redoViewportArrange && redoViewportArrange();\n\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\n      overflowAmuntCache = updateOverflowAmountCache(\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\n        _force\n      );\n    }\n\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\n    const [hasOverflow, hasOverflowChanged] = updateHasOverflowCache({\n      x: overflowAmount.w > 0,\n      y: overflowAmount.h > 0,\n    });\n    const removeClipping =\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\n    const adjustViewportStyle =\n      _paddingStyleChanged ||\n      _directionChanged ||\n      _scrollbarSizeChanged ||\n      sizeFractionChanged ||\n      viewportScrollSizeChanged ||\n      overflowEdgeChanged ||\n      overflowAmountChanged ||\n      overflowChanged ||\n      showNativeOverlaidScrollbarsChanged ||\n      viewportChanged;\n    const viewportOverflowState = createViewportOverflowState(hasOverflow, overflow);\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\n      viewportOverflowState._overflowStyle\n    );\n    const [flowDirectionStyles, flowDirectionStylesChanged] = updateFlowDirectionStyles(_force);\n\n    const adjustMeasuredScrollCoordinates =\n      _directionChanged || _appear || flowDirectionStylesChanged || hasOverflowChanged || _force;\n    const [scrollCoordinates, scrollCoordinatesChanged] = adjustMeasuredScrollCoordinates\n      ? updateMeasuredScrollCoordinates(getMeasuredScrollCoordinates(flowDirectionStyles), _force)\n      : getCurrentMeasuredScrollCoordinates();\n\n    if (adjustViewportStyle) {\n      overflowStyleChanged && setViewportOverflowStyle(viewportOverflowState._overflowStyle);\n\n      if (_hideNativeScrollbars && _arrangeViewport) {\n        setStyles(\n          _viewport,\n          _hideNativeScrollbars(\n            viewportOverflowState,\n            _observersState,\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction)\n          )\n        );\n      }\n    }\n\n    setMeasuringMode(false);\n\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueNoClipping, removeClipping);\n    addRemoveAttrClass(_padding, dataAttributePadding, dataValueNoClipping, removeClipping);\n\n    assignDeep(structureSetupState, {\n      _overflowStyle: overflowStyle,\n      _overflowEdge: {\n        x: overflowEdge.w,\n        y: overflowEdge.h,\n      },\n      _overflowAmount: {\n        x: overflowAmount.w,\n        y: overflowAmount.h,\n      },\n      _hasOverflow: hasOverflow,\n      _scrollCoordinates: sanitizeScrollCoordinates(scrollCoordinates, overflowAmount),\n    });\n\n    return {\n      _overflowStyleChanged: overflowStyleChanged,\n      _overflowEdgeChanged: overflowEdgeChanged,\n      _overflowAmountChanged: overflowAmountChanged,\n      _scrollCoordinatesChanged: scrollCoordinatesChanged || overflowAmountChanged,\n      _scrolled: adjustMeasuredScrollCoordinates,\n    };\n  };\n};\n","import { getEnvironment } from '~/environment';\nimport {\n  assignDeep,\n  each,\n  getElementScroll,\n  getZeroScrollCoordinates,\n  scrollElementTo,\n  strHidden,\n  strMarginBottom,\n  strMarginLeft,\n  strMarginRight,\n  strPaddingBottom,\n  strPaddingLeft,\n  strPaddingRight,\n  strPaddingTop,\n  type TRBL,\n  type XY,\n} from '~/support';\nimport type { ScrollCoordinates } from '~/support';\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\nimport type {\n  ObserversSetupState,\n  ObserversSetupUpdateHints,\n  Setup,\n  SetupUpdateInfo,\n} from '~/setups';\nimport type { InitializationTarget } from '~/initialization';\nimport type { StyleObject, OverflowStyle } from '~/typings';\nimport { createStructureSetupElements } from './structureSetup.elements';\nimport {\n  createOverflowUpdateSegment,\n  createPaddingUpdateSegment,\n  createTrinsicUpdateSegment,\n} from './updateSegments';\n\nexport interface StructureSetupState {\n  _padding: TRBL;\n  _paddingAbsolute: boolean;\n  _viewportPaddingStyle: StyleObject;\n  _overflowEdge: XY<number>;\n  _overflowAmount: XY<number>;\n  _overflowStyle: XY<OverflowStyle>;\n  _hasOverflow: XY<boolean>;\n  _scrollCoordinates: ScrollCoordinates;\n}\n\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\n  _observersState: ObserversSetupState;\n  _observersUpdateHints?: ObserversSetupUpdateHints;\n}\n\nexport type StructureSetupUpdateHints = {\n  _overflowEdgeChanged?: boolean;\n  _overflowAmountChanged?: boolean;\n  _overflowStyleChanged?: boolean;\n  _paddingStyleChanged?: boolean;\n  _scrollCoordinatesChanged?: boolean;\n};\n\nexport type StructureSetup = [\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\n  /** The elements created by the structure setup. */\n  StructureSetupElementsObj,\n  /** Function to be called when the initialization was canceled. */\n  () => void\n];\n\nexport type StructureUpdateSegment = (\n  updateInfo: StructureSetupUpdateInfo,\n  updateHints: Readonly<StructureSetupUpdateHints>\n) => StructureSetupUpdateHints | void;\n\nexport type CreateStructureUpdateSegment = (\n  structureSetupElements: StructureSetupElementsObj,\n  state: StructureSetupState\n) => StructureUpdateSegment;\n\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\n  const state: StructureSetupState = {\n    _padding: {\n      t: 0,\n      r: 0,\n      b: 0,\n      l: 0,\n    },\n    _paddingAbsolute: false,\n    _viewportPaddingStyle: {\n      [strMarginRight]: 0,\n      [strMarginBottom]: 0,\n      [strMarginLeft]: 0,\n      [strPaddingTop]: 0,\n      [strPaddingRight]: 0,\n      [strPaddingBottom]: 0,\n      [strPaddingLeft]: 0,\n    },\n    _overflowEdge: { x: 0, y: 0 },\n    _overflowAmount: { x: 0, y: 0 },\n    _overflowStyle: {\n      x: strHidden,\n      y: strHidden,\n    },\n    _hasOverflow: {\n      x: false,\n      y: false,\n    },\n    _scrollCoordinates: getZeroScrollCoordinates(),\n  };\n  const { _target, _scrollOffsetElement, _viewportIsTarget, _removeScrollObscuringStyles } =\n    elements;\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\n  const doViewportArrange =\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\n\n  const updateSegments: StructureUpdateSegment[] = [\n    createTrinsicUpdateSegment(elements, state),\n    createPaddingUpdateSegment(elements, state),\n    createOverflowUpdateSegment(elements, state),\n  ];\n\n  return [\n    appendStructureElements,\n    (updateInfo) => {\n      const updateHints: StructureSetupUpdateHints = {};\n      const adjustScrollOffset = doViewportArrange;\n      const scrollOffset = adjustScrollOffset && getElementScroll(_scrollOffsetElement);\n      const revertScrollObscuringStyles = scrollOffset && _removeScrollObscuringStyles();\n\n      each(updateSegments, (updateSegment) => {\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\n      });\n\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\n      revertScrollObscuringStyles && revertScrollObscuringStyles();\n      !_viewportIsTarget && scrollElementTo(_target, 0);\n\n      return updateHints;\n    },\n    state,\n    elements,\n    canceled,\n  ];\n};\n","import {\n  assignDeep,\n  bind,\n  getElementScroll,\n  isEmptyObject,\n  keys,\n  runEachAndClear,\n  scrollElementTo,\n} from '~/support';\nimport { createOptionCheck } from '~/options';\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\nimport type { DeepReadonly } from '~/typings';\nimport type { InitializationTarget } from '~/initialization';\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\nimport { createObserversSetup } from './observersSetup';\nimport { createScrollbarsSetup } from './scrollbarsSetup';\nimport { createStructureSetup } from './structureSetup';\n\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\n\nexport type SetupUpdateInfo = {\n  _checkOption: OptionsCheckFn<Options>;\n  _changedOptions: PartialOptions;\n  _force: boolean;\n};\n\nexport type Setup<\n  U extends SetupUpdateInfo,\n  S extends Readonly<Record<string, any>>,\n  H extends SetupUpdateHints | void\n> = [\n  /** The create function which returns the `destroy` function. */\n  _create: () => () => void,\n  /** Function which updates the setup and returns the update result. */\n  _update: (updateInfo: U) => H,\n  /** Function which returns the current state. */\n  _state: S\n];\n\nexport interface SetupsUpdateInfo {\n  /** The options that changed or `undefined` if none changed. */\n  _changedOptions?: PartialOptions;\n  /** Whether chache should be ignored. */\n  _force?: boolean;\n  /** Whether observers should take their records and thus update as well. */\n  _takeRecords?: boolean;\n  /** Whether one or more scrollbars has been cloned. */\n  _cloneScrollbar?: boolean;\n}\n\nexport interface SetupsUpdateHints {\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\n}\n\nexport interface SetupsState {\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\n}\n\nexport interface SetupsElements {\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\n}\n\nexport type Setups = [\n  construct: () => () => void,\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\n  getState: () => SetupsState,\n  elements: SetupsElements,\n  canceled: () => void\n];\n\nexport const createSetups = (\n  target: InitializationTarget,\n  options: ReadonlyOptions,\n  isDestroyed: () => boolean,\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\n  onScroll: (scrollEvent: Event) => void\n): Setups => {\n  let cacheAndOptionsInitialized = false;\n  const getCurrentOption = createOptionCheck(options, {});\n  const [\n    structureSetupCreate,\n    structureSetupUpdate,\n    structureSetupState,\n    structureSetupElements,\n    structureSetupCanceled,\n  ] = createStructureSetup(target);\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\n    structureSetupElements,\n    structureSetupState,\n    getCurrentOption,\n    (observersUpdateHints) => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      update({}, observersUpdateHints);\n    }\n  );\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\n    createScrollbarsSetup(\n      target,\n      options,\n      observersSetupState,\n      structureSetupState,\n      structureSetupElements,\n      onScroll\n    );\n\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\n\n  const update = (\n    updateInfo: SetupsUpdateInfo,\n    observerUpdateHints?: ObserversSetupUpdateHints\n  ): boolean => {\n    if (isDestroyed()) {\n      return false;\n    }\n\n    const {\n      _changedOptions: rawChangedOptions,\n      _force: rawForce,\n      _takeRecords,\n      _cloneScrollbar,\n    } = updateInfo;\n\n    const _changedOptions = rawChangedOptions || {};\n    const _force = !!rawForce || !cacheAndOptionsInitialized;\n    const baseUpdateInfoObj: SetupUpdateInfo = {\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\n      _changedOptions,\n      _force,\n    };\n\n    if (_cloneScrollbar) {\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\n      return false;\n    }\n\n    const observersHints =\n      observerUpdateHints ||\n      observersSetupUpdate(\n        assignDeep({}, baseUpdateInfoObj, {\n          _takeRecords,\n        })\n      );\n\n    const structureHints = structureSetupUpdate(\n      assignDeep({}, baseUpdateInfoObj, {\n        _observersState: observersSetupState,\n        _observersUpdateHints: observersHints,\n      })\n    );\n\n    scrollbarsSetupUpdate(\n      assignDeep({}, baseUpdateInfoObj, {\n        _observersUpdateHints: observersHints,\n        _structureUpdateHints: structureHints,\n      })\n    );\n\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\n    const changed =\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\n\n    cacheAndOptionsInitialized = true;\n\n    changed &&\n      onUpdated(updateInfo, {\n        _observersUpdateHints: observersHints,\n        _structureUpdateHints: structureHints,\n      });\n\n    return changed;\n  };\n\n  return [\n    () => {\n      const { _originalScrollOffsetElement, _scrollOffsetElement, _removeScrollObscuringStyles } =\n        structureSetupElements;\n      const initialScroll = getElementScroll(_originalScrollOffsetElement);\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\n      const revertScrollObscuringStyles = _removeScrollObscuringStyles();\n\n      scrollElementTo(_scrollOffsetElement, initialScroll);\n      revertScrollObscuringStyles();\n\n      return bind(runEachAndClear, destroyFns);\n    },\n    update,\n    () => ({\n      _observersSetupState: observersSetupState,\n      _structureSetupState: structureSetupState,\n    }),\n    {\n      _structureSetupElements: structureSetupElements,\n      _scrollbarsSetupElements: scrollbarsSetupElements,\n    },\n    structureSetupCanceled,\n  ];\n};\n","import {\n  assignDeep,\n  isEmptyObject,\n  isFunction,\n  isHTMLElement,\n  createEventListenerHub,\n  isPlainObject,\n  keys,\n  isArray,\n  push,\n  runEachAndClear,\n  bind,\n  removeUndefinedProperties,\n} from '~/support';\nimport { getOptionsDiff } from '~/options';\nimport { getEnvironment } from '~/environment';\nimport { cancelInitialization } from '~/initialization';\nimport { addInstance, getInstance, removeInstance } from '~/instances';\nimport { createSetups } from '~/setups';\nimport {\n  addPlugins,\n  getStaticPluginModuleInstance,\n  optionsValidationPluginModuleName,\n  pluginModules,\n  registerPluginModuleInstances,\n} from '~/plugins';\nimport type { XY, TRBL } from '~/support';\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\nimport type {\n  InferInstancePluginModuleInstance,\n  InferStaticPluginModuleInstance,\n  InstancePlugin,\n  OptionsValidationPlugin,\n  Plugin,\n  PluginModuleInstance,\n  StaticPlugin,\n} from '~/plugins';\nimport type { Initialization, InitializationTarget, PartialInitialization } from '~/initialization';\nimport type { OverflowStyle } from '~/typings';\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\nimport type {\n  ScrollbarsSetupElement,\n  ScrollbarStructure,\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\nimport { setNonce } from './nonce';\n\n// Notes:\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\n\n/**\n * Describes the OverlayScrollbars environment.\n */\nexport interface Environment {\n  /** The native scrollbars size of the browser / system. */\n  scrollbarsSize: XY<number>;\n  /** Whether the native scrollbars are overlaid. */\n  scrollbarsOverlaid: XY<boolean>;\n  /** Whether the browser supports native scrollbars hiding. */\n  scrollbarsHiding: boolean;\n  /** Whether the browser supports the ScrollTimeline API. */\n  scrollTimeline: boolean;\n  /** The default Initialization to use if nothing else is specified. */\n  staticDefaultInitialization: Initialization;\n  /** The default Options to use if nothing else is specified. */\n  staticDefaultOptions: Options;\n\n  /** Returns the current default Initialization. */\n  getDefaultInitialization(): Initialization;\n  /** Returns the current default Options. */\n  getDefaultOptions(): Options;\n\n  /**\n   * Sets a new default Initialization.\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\n   * @param newDefaultInitialization The new default Initialization.\n   * @returns The current default Initialization.\n   */\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\n  /**\n   * Sets new default Options.\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\n   * @param newDefaultOptions The new default Options.\n   * @returns The current default options.\n   */\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\n}\n\n/**\n * The primary entry point to OverlayScrollbars.\n */\nexport interface OverlayScrollbarsStatic {\n  /**\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\n   * @param target The initialization target to from which the instance shall be returned.\n   */\n  (target: InitializationTarget): OverlayScrollbars | undefined;\n  /**\n   * Initializes a new OverlayScrollbars instance to the given target\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\n   * @param target The target.\n   * @param options The options. (Can be just an empty object)\n   * @param eventListeners Optional event listeners.\n   */\n  (\n    target: InitializationTarget,\n    options: PartialOptions,\n    eventListeners?: EventListeners\n  ): OverlayScrollbars;\n\n  /**\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\n   * @param osInstance The value which shall be checked.\n   */\n  valid(osInstance: any): osInstance is OverlayScrollbars;\n  /**\n   * Gets the environment.\n   */\n  env(): Environment;\n  /**\n   * Sets the nonce attribute for inline styles.\n   */\n  nonce(newNonce: string | undefined): void;\n  /**\n   * Adds a single plugin.\n   * @param plugin The plugin to be added.\n   * @returns The plugins static modules instance or `void` if no instance was found.\n   */\n  plugin<P extends Plugin>(\n    plugin: P\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\n  /**\n   * Adds multiple plugins.\n   * @param plugins The plugins to be added.\n   * @returns The plugins static modules instances or `void` if no instance was found.\n   */\n  plugin<P extends [Plugin, ...Plugin[]]>(\n    plugins: P\n  ): P extends [Plugin, ...Plugin[]]\n    ? {\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\n      }\n    : void;\n}\n\n/**\n * Describes a OverlayScrollbars instances state.\n */\nexport interface State {\n  /** Describes the current padding in pixel. */\n  padding: TRBL;\n  /** Whether the current padding is absolute. */\n  paddingAbsolute: boolean;\n  /** The client width (x) & height (y) of the viewport in pixel. */\n  overflowEdge: XY<number>;\n  /** The overflow amount in pixel. */\n  overflowAmount: XY<number>;\n  /** The css overflow style of the viewport. */\n  overflowStyle: XY<OverflowStyle>;\n  /** Whether the viewport has an overflow. */\n  hasOverflow: XY<boolean>;\n  /** The scroll coordinates of the viewport. */\n  scrollCoordinates: {\n    /** The start (origin) scroll coordinates for each axis. */\n    start: XY<number>;\n    /** The end scroll coordinates for each axis. */\n    end: XY<number>;\n  };\n  /** Whether the direction is considered rtl. */\n  directionRTL: boolean;\n  /** Whether the instance is considered destroyed. */\n  destroyed: boolean;\n}\n\n/**\n * Describes the elements of a scrollbar.\n */\nexport interface ScrollbarElements {\n  /**\n   * The root element of the scrollbar.\n   * The HTML structure looks like this:\n   * <scrollbar>\n   *   <track>\n   *     <handle />\n   *   </track>\n   * </scrollbar>\n   */\n  scrollbar: HTMLElement;\n  /** The track element of the scrollbar. */\n  track: HTMLElement;\n  /** The handle element of the scrollbar. */\n  handle: HTMLElement;\n}\n\n/**\n * Describes the elements of a scrollbar and provides the possibility to clone them.\n */\nexport interface CloneableScrollbarElements extends ScrollbarElements {\n  /**\n   * Clones the current scrollbar and returns the cloned elements.\n   * The returned elements aren't added to the DOM.\n   */\n  clone(): ScrollbarElements;\n}\n\n/**\n * Describes the elements of a OverlayScrollbars instance.\n */\nexport interface Elements {\n  /** The element the instance was applied to. */\n  target: HTMLElement;\n  /** The host element. Its the root of all other elements. */\n  host: HTMLElement;\n  /**\n   * The element which is responsible to apply correct paddings.\n   * Depending on the Initialization it can be the same as the viewport element.\n   */\n  padding: HTMLElement;\n  /** The element which is responsible to do any scrolling. */\n  viewport: HTMLElement;\n  /**\n   * The element which is responsible to hold the content.\n   * Depending on the Initialization it can be the same as the viewport element.\n   */\n  content: HTMLElement;\n  /**\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\n   * Depending on the target element it can be the same as the viewport element.\n   */\n  scrollOffsetElement: HTMLElement;\n  /**\n   * The element through which you can add `scroll` events.\n   * Depending on the target element it can be the same as the viewport element.\n   */\n  scrollEventElement: HTMLElement | Document;\n  /** The horizontal scrollbar elements. */\n  scrollbarHorizontal: CloneableScrollbarElements;\n  /** The vertical scrollbar elements. */\n  scrollbarVertical: CloneableScrollbarElements;\n}\n\n/**\n * Describes a OverlayScrollbars instance.\n */\nexport interface OverlayScrollbars {\n  /** Gets the current options of the instance. */\n  options(): Options;\n  /**\n   * Sets the options of the instance.\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\n   * @param newOptions The new options which should be applied.\n   * @param pure Whether the options should be reset before the new options are added.\n   * @returns Returns the current options of the instance.\n   */\n  options(newOptions: PartialOptions, pure?: boolean): Options;\n\n  /**\n   * Adds event listeners to the instance.\n   * @param eventListeners An object which contains the added listeners.\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\n   * @returns Returns a function which removes the added listeners.\n   */\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\n  /**\n   * Adds a single event listener to the instance.\n   * @param name The name of the event.\n   * @param listener The listener which is invoked on that event.\n   * @returns Returns a function which removes the added listeners.\n   */\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\n  /**\n   * Adds multiple event listeners to the instance.\n   * @param name The name of the event.\n   * @param listener The listeners which are invoked on that event.\n   * @returns Returns a function which removes the added listeners.\n   */\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\n\n  /**\n   * Removes a single event listener from the instance.\n   * @param name The name of the event.\n   * @param listener The listener which shall be removed.\n   */\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\n  /**\n   * Removes multiple event listeners from the instance.\n   * @param name The name of the event.\n   * @param listener The listeners which shall be removed.\n   */\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\n\n  /**\n   * Updates the instance.\n   * @param force Whether the update should force the cache to be invalidated.\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\n   * The update event is only triggered if something changed because of this update.\n   */\n  update(force?: boolean): boolean;\n  /** Returns the state of the instance. */\n  state(): State;\n  /** Returns the elements of the instance. */\n  elements(): Elements;\n  /** Destroys the instance and removes all added elements. */\n  destroy(): void;\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\n  target: InitializationTarget,\n  options?: PartialOptions,\n  eventListeners?: EventListeners\n) => {\n  const { _getDefaultOptions } = getEnvironment();\n  const targetIsElement = isHTMLElement(target);\n  const instanceTarget = targetIsElement ? target : target.target;\n  const potentialInstance = getInstance(instanceTarget);\n  if (options && !potentialInstance) {\n    let destroyed = false;\n    const destroyFns: (() => void)[] = [];\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\n    const validateOptions = (newOptions: PartialOptions) => {\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\n        optionsValidationPluginModuleName\n      );\n      return pluginValidate\n        ? pluginValidate(newOptionsWithoutUndefined, true)\n        : newOptionsWithoutUndefined;\n    };\n    const currentOptions: ReadonlyOptions = assignDeep(\n      {},\n      _getDefaultOptions(),\n      validateOptions(options)\n    );\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\n      createEventListenerHub<EventListenerArgs>();\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\n      createEventListenerHub(eventListeners);\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\n      triggerInstanceEvent(name, args);\n      triggerPluginEvent(name, args);\n    };\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\n      createSetups(\n        target,\n        currentOptions,\n        () => destroyed,\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\n          const {\n            _sizeChanged,\n            _directionChanged,\n            _heightIntrinsicChanged,\n            _contentMutation,\n            _hostMutation,\n            _appear,\n          } = _observersUpdateHints;\n\n          const {\n            _overflowEdgeChanged,\n            _overflowAmountChanged,\n            _overflowStyleChanged,\n            _scrollCoordinatesChanged,\n          } = _structureUpdateHints;\n\n          triggerEvent('updated', [\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            instance,\n            {\n              updateHints: {\n                sizeChanged: !!_sizeChanged,\n                directionChanged: !!_directionChanged,\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\n                overflowEdgeChanged: !!_overflowEdgeChanged,\n                overflowAmountChanged: !!_overflowAmountChanged,\n                overflowStyleChanged: !!_overflowStyleChanged,\n                scrollCoordinatesChanged: !!_scrollCoordinatesChanged,\n                contentMutation: !!_contentMutation,\n                hostMutation: !!_hostMutation,\n                appear: !!_appear,\n              },\n              changedOptions: _changedOptions || {},\n              force: !!_force,\n            },\n          ]);\n        },\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\n      );\n\n    const destroy = (canceled: boolean) => {\n      removeInstance(instanceTarget);\n      runEachAndClear(destroyFns);\n\n      destroyed = true;\n\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      triggerEvent('destroyed', [instance, canceled]);\n      removePluginEvents();\n      removeInstanceEvents();\n    };\n\n    const instance: OverlayScrollbars = {\n      options(newOptions?: PartialOptions, pure?: boolean) {\n        if (newOptions) {\n          const base = pure ? _getDefaultOptions() : {};\n          const changedOptions = getOptionsDiff(\n            currentOptions,\n            assignDeep(base, validateOptions(newOptions))\n          );\n          if (!isEmptyObject(changedOptions)) {\n            assignDeep(currentOptions, changedOptions);\n            setupsUpdate({ _changedOptions: changedOptions });\n          }\n        }\n        return assignDeep({}, currentOptions);\n      },\n      on: addInstanceEvent,\n      off: (name, listener) => {\n        name && listener && removeInstanceEvents(name, listener);\n      },\n      state() {\n        const { _observersSetupState, _structureSetupState } = setupsState();\n        const { _directionIsRTL } = _observersSetupState;\n        const {\n          _overflowEdge,\n          _overflowAmount,\n          _overflowStyle,\n          _hasOverflow,\n          _padding,\n          _paddingAbsolute,\n          _scrollCoordinates,\n        } = _structureSetupState;\n        return assignDeep(\n          {},\n          {\n            overflowEdge: _overflowEdge,\n            overflowAmount: _overflowAmount,\n            overflowStyle: _overflowStyle,\n            hasOverflow: _hasOverflow,\n            scrollCoordinates: {\n              start: _scrollCoordinates._start,\n              end: _scrollCoordinates._end,\n            },\n            padding: _padding,\n            paddingAbsolute: _paddingAbsolute,\n            directionRTL: _directionIsRTL,\n            destroyed,\n          }\n        );\n      },\n      elements() {\n        const {\n          _target,\n          _host,\n          _padding,\n          _viewport,\n          _content,\n          _scrollOffsetElement,\n          _scrollEventElement,\n        } = setupsElements._structureSetupElements;\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\n        const translateScrollbarStructure = (\n          scrollbarStructure: ScrollbarStructure\n        ): ScrollbarElements => {\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\n          return {\n            scrollbar: _scrollbar,\n            track: _track,\n            handle: _handle,\n          };\n        };\n        const translateScrollbarsSetupElement = (\n          scrollbarsSetupElement: ScrollbarsSetupElement\n        ): CloneableScrollbarElements => {\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\n\n          return assignDeep({}, translatedStructure, {\n            clone: () => {\n              const result = translateScrollbarStructure(_clone());\n              setupsUpdate({ _cloneScrollbar: true });\n              return result;\n            },\n          });\n        };\n        return assignDeep(\n          {},\n          {\n            target: _target,\n            host: _host,\n            padding: _padding || _viewport,\n            viewport: _viewport,\n            content: _content || _viewport,\n            scrollOffsetElement: _scrollOffsetElement,\n            scrollEventElement: _scrollEventElement,\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\n          }\n        );\n      },\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\n      destroy: bind(destroy, false),\n      plugin: <P extends InstancePlugin>(plugin: P) =>\n        instancePluginModuleInstances[keys(plugin)[0]] as\n          | InferInstancePluginModuleInstance<P>\n          | undefined,\n    };\n\n    push(destroyFns, [setupsCanceled]);\n\n    // valid inside plugins\n    addInstance(instanceTarget, instance);\n\n    // init plugins\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\n      instance,\n      addPluginEvent,\n      instancePluginModuleInstances,\n    ]);\n\n    if (\n      cancelInitialization(\n        setupsElements._structureSetupElements._isBody,\n        !targetIsElement && target.cancel\n      )\n    ) {\n      destroy(true);\n      return instance;\n    }\n\n    push(destroyFns, setupsConstruct());\n\n    triggerEvent('initialized', [instance]);\n\n    instance.update();\n\n    return instance;\n  }\n  return potentialInstance!;\n};\n\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\n  const isArr = isArray(plugins);\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\n    isArr ? plugins : [plugins];\n  const result = pluginsToAdd.map(\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\n  );\n  addPlugins(pluginsToAdd);\n  return isArr ? result : (result[0] as any);\n};\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\n  return isPlainObject(elements) && !!getInstance(elements.target);\n};\nOverlayScrollbars.env = () => {\n  const {\n    _nativeScrollbarsSize,\n    _nativeScrollbarsOverlaid,\n    _nativeScrollbarsHiding,\n    _scrollTimeline,\n    _staticDefaultInitialization,\n    _staticDefaultOptions,\n    _getDefaultInitialization,\n    _setDefaultInitialization,\n    _getDefaultOptions,\n    _setDefaultOptions,\n  } = getEnvironment();\n  return assignDeep(\n    {},\n    {\n      scrollbarsSize: _nativeScrollbarsSize,\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\n      scrollbarsHiding: _nativeScrollbarsHiding,\n      scrollTimeline: _scrollTimeline,\n      staticDefaultInitialization: _staticDefaultInitialization,\n      staticDefaultOptions: _staticDefaultOptions,\n\n      getDefaultInitialization: _getDefaultInitialization,\n      setDefaultInitialization: _setDefaultInitialization,\n      getDefaultOptions: _getDefaultOptions,\n      setDefaultOptions: _setDefaultOptions,\n    }\n  );\n};\nOverlayScrollbars.nonce = setNonce;\n"],"names":["createCache","options","update","_initialValue","_equal","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isBrowser","window","HTMLElement","document","wnd","mathMax","Math","max","mathMin","min","mathRound","round","mathAbs","abs","mathSign","sign","cAF","cancelAnimationFrame","rAF","requestAnimationFrame","setT","setTimeout","clearT","clearTimeout","getApi","name","undefined","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","scrollT","isUndefined","obj","isNull","type","Object","prototype","toString","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","constructor","isHTMLElement","isElement","Element","animationCurrentTime","performance","now","animateNumber","from","to","duration","onFrame","easing","animationFrameId","timeStart","finalDuration","frame","complete","timeNow","timeElapsed","stopAnimation","percent","progress","animationCompleted","each","source","callback","i","keys","key","inArray","arr","item","indexOf","concat","a","b","push","array","items","arrayIsSingleItem","apply","createOrKeepArray","value","isEmptyArray","deduplicateArray","Set","runEachAndClear","args","keep","runFn","fn","strPaddingTop","strPaddingRight","strPaddingLeft","strPaddingBottom","strMarginLeft","strMarginRight","strMarginBottom","strOverflowX","strOverflowY","strWidth","strHeight","strVisible","strHidden","strScroll","capitalizeFirstLetter","str","finalStr","String","toUpperCase","slice","equal","props","propMutation","result","prop","compareA","compareB","equalWH","equalXY","equalTRBL","noop","bind","_len","arguments","_key","selfClearTimeout","timeout","id","setTFn","clearTFn","debounce","functionToDebounce","_ref","_timeout","_maxDelay","_leading","_mergeParams","maxTimeoutId","prevArguments","latestArguments","leadingInvoked","clear","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","hasOwnProperty","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","_","copy","copyIsArray","src","clone","removeUndefinedProperties","deep","isEmptyObject","capNumber","number","getDomTokensArray","tokens","split","filter","token","getAttr","elm","attrName","getAttribute","hasAttr","hasAttribute","setAttrs","attrNames","setAttribute","removeAttrs","removeAttribute","domTokenListAttr","initialArr","setElmAttr","domTokenListOperation","operationTokens","operation","initialArrSet","join","_remove","removeTokens","_add","addTokens","_has","hasTokens","tokenSet","reduce","boolean","includes","removeAttrClass","addAttrClass","addRemoveAttrClass","add","hasAttrClass","createDomTokenListClass","removeClass","className","addClass","find","selector","rootElm","querySelectorAll","findFirst","querySelector","is","matches","isBodyElement","contents","childNodes","parent","parentElement","closest","getFocusedElement","doc","activeElement","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","deepBoundaryIsValid","removeElements","nodes","node","parentElm","removeChild","appendChildren","children","child","appendChild","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","trim","getCSSVal","computedStyle","getPropertyValue","validFiniteNumber","notNaN","isFinite","parseToZeroOrNumber","parseFloat","roundCssNumber","numberToCssPx","setStyles","styles","rawValue","elmStyle","style","setProperty","_unused","getStyles","pseudoElm","getSingleStyle","getStylesResult","getComputedStyle","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","getTrasformTranslateValue","isHorizontal","x","y","elementHasDimensions","offsetWidth","offsetHeight","getClientRects","zeroObj","w","h","getElmWidthHeightProperty","property","getWindowSize","customWnd","getOffsetSize","getClientSize","getScrollSize","getFractionalSize","cssWidth","cssHeight","getBoundingClientRect","hasDimensions","domRectHasDimensions","rect","domRectAppeared","currContentRect","prevContentRect","rectHasDimensions","rectHadDimensions","removeEventListener","eventNames","listener","capture","eventName","addEventListener","passive","_passive","_capture","once","_once","nativeOptions","map","finalListener","evt","stopPropagation","preventDefault","stopAndPrevent","scrollElementTo","position","scrollLeft","scrollTop","getElementScroll","getZeroScrollCoordinates","_start","_end","sanitizeScrollCoordinates","rawScrollCoordinates","overflowAmount","sanitizeAxis","start","end","amount","newStart","newEnd","startAbs","endAbs","_sanitizeAxis","startX","endX","_sanitizeAxis2","startY","endY","isDefaultDirectionScrollCoordinates","_ref2","getAxis","getScrollCoordinatesPercent","_ref3","currentScroll","current","focusElement","element","focus","preventScroll","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","get","currListener","forEach","addEvent","nameOrEventListeners","listenerOrPure","set","eventListenerKeys","offFns","eventListener","triggerEvent","event","opsStringify","JSON","stringify","val","getPropByPath","path","o","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","optionKey","currOptionValue","newOptionValue","isDiff","createOptionCheck","changedOptions","dataAttributePrefix","classNameEnvironment","classNameEnvironmentScrollbarHidden","dataAttributeInitialize","dataValueNoClipping","dataAttributeHtmlBody","dataAttributeHost","dataValueHostIsHost","dataAttributeViewport","dataValueViewportOverflowXPrefix","dataValueViewportOverflowYPrefix","dataValueViewportArrange","dataValueViewportMeasuring","dataValueViewportScrolling","dataValueViewportScrollbarHidden","dataValueViewportNoContent","dataAttributePadding","dataAttributeContent","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbarThemeNone","classNameScrollbar","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNameScrollbarVisible","classNameScrollbarCornerless","classNameScrollbarInteraction","classNameScrollbarUnusable","classNameScrollbarAutoHide","classNameScrollbarAutoHideHidden","classNameScrollbarWheel","classNameScrollbarTrackInteractive","classNameScrollbarHandleInteractive","nonce","getNonce","setNonce","newNonce","environmentInstance","createEnvironment","getNativeScrollbarSize","measureElm","measureElmChild","body","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","envStyle","envDOM","envElm","envChildElm","firstChild","styleElm","lastChild","_createEventListenerH","_createCache","updateNativeScrollbarSizeCache","getNativeScrollbarSizeCache","_getNativeScrollbarSi","nativeScrollbarsSize","nativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","elements","host","padding","viewport","content","slot","cancel","staticDefaultOptions","getDefaultOptions","getDefaultInitialization","env","_nativeScrollbarsSize","_nativeScrollbarsOverlaid","_nativeScrollbarsHiding","_scrollTimeline","_addResizeListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","matchMedia","addZoomListener","onZoom","media","devicePixelRatio","_updateNativeScrollba","updatedNativeScrollbarSize","nativeScrollbarSizeChanged","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElement","staticInitializationElementValue","staticInitialization","resolvedInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementValue","dynamicInitialization","cancelInitialization","isBody","cancelInitializationValue","_getEnvironment","_getDefaultInitializa","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","targetInstanceMap","WeakMap","addInstance","osInstance","removeInstance","delete","getInstance","createEventContentChange","eventContentChange","destroyed","destroy","updateElements","getElements","eventElmList","entries","isTargetChild","contains","removeListener","createDOMObserver","isContentObserver","isConnected","_attributes","_styleChangingAttributes","_eventContentChange","_nestedTargetSelector","_ignoreTargetChange","_ignoreContentChange","debouncedEventContentChange","_createEventContentCh","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","fromRecords","mutations","ignoreTargetChange","ignoreContentChange","totalChangedNodes","targetChangedAttrs","targetStyleChanged","contentChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","removedNodes","isAttributesType","isChildListType","targetIsMutationTarget","isAttrChange","attributeValue","attributeChanged","styleChangingAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","pluginModules","staticPluginModuleInstances","addPlugins","addedPlugin","plugin","registerPluginModuleInstances","staticObj","instanceInfo","_plugin$name","osStatic","static","instance","instanceObj","instancePluginMap","ctor","getStaticPluginModuleInstance","pluginModuleName","_extends","module","exports","assign","n","e","__esModule","optionsTemplateTypes","string","object","function","null","validateRecursive","template","doWriteErrors","propPath","validatedOptions","optionsCopy","optionsValue","templateValue","templateIsComplex","propPrefix","_validateRecursive","validated","foreign","isValid","errorEnumStrings","errorPossibleTypes","optionsValueType","templateValueArr","currTemplateType","typeString","isEnumString","enumStringSplit","possibility","console","warn","validateOptions","optionsValidationPluginModuleName","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","scrollbarsClickScrollAllowedValues","optionsTemplate","_validateOptions","sizeObserverPluginName","SizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","_setStyles","scrollAmount","scrollEventName","observerElementChildren","observerElementChildrenRoot","shrinkElement","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","destroyFns","getShowNativeOverlaidScrollbars","checkOption","_checkOption","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","overflowIsVisible","overflowBehavior","createViewportOverflowState","hasOverflow","getAxisOverflowStyle","axisBehavior","axisHasOverflow","perpendicularBehavior","perpendicularOverflow","behaviorStyle","axisOverflowVisible","perpendicularOverflowVisible","nonPerpendicularOverflow","nonOverflow","_overflowStyle","_overflowScroll","scrollbarsHidingPluginName","ScrollbarsHidingPlugin","_viewportArrangement","structureSetupElements","structureSetupState","observersSetupState","checkOptions","_viewportIsTarget","_viewport","doViewportArrange","_getShowNativeOverlai","readViewportOverflowState","getStatePerAxis","styleKey","overflowStyle","overflowScroll","_getStatePerAxis","xOverflowStyle","xOverflowScroll","_getStatePerAxis2","yOverflowStyle","yOverflowScroll","_getViewportOverflowHideOffset","viewportOverflowState","arrangeHideOffset","getHideOffsetPerAxis","isOverlaid","nativeScrollbarSize","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","_getHideOffsetPerAxis","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","_getHideOffsetPerAxis2","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","_hideNativeScrollbars","viewportArrange","_directionIsRTL","_assignDeep","viewportStyleObj","_getViewportOverflowH","arrangeX","arrangeY","hideOffsetX","hideOffsetY","_viewportPaddingStyle","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","_arrangeViewport","viewportScrollSize","sizeFraction","_getViewportOverflowH2","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","_undoViewportArrange","finalViewportOverflowState","viewportPaddingStyle","_getViewportOverflowH3","finalPaddingStyle","assignProps","prevStyle","addArrange","clickScrollPluginModuleName","ClickScrollPlugin","moveHandleRelative","targetOffset","handleLength","onClickScrollCompleted","stopped","stopPressAnimation","linearScrollMs","easedScrollMs","_selfClearTimeout","setPressAnimationTimeout","clearPressAnimationTimeout","targetOffsetSign","handleLengthWithTargetSign","handleLengthWithTargetSignHalf","easedEndPressAnimation","linearPressAnimation","linearFrom","msFactor","completed","stopClickAnimation","clickAnimationProgress","clickAnimationCompleted","remainingScrollDistance","continueWithPress","remainingLinearScrollDistance","linearBridge","stopClick","createSizeObserver","_appear","sizeObserverPlugin","updateResizeObserverContentRectCache","baseElements","sizeObserver","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","ResizeObserverEntry","skip","_updateResizeObserver","contentRect","currRContentRect","_sizeChanged","resizeObserverInstance","pop","_sizeObserverPlugin","pluginAppearCallback","pluginDestroyFns","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","heightIntrinsic","heightIntrinsicChanged","intersectionObserverCallback","root","onSizeChanged","newSize","createObserversSetup","getCurrentOption","onObserversUpdated","debounceTimeout","debounceMaxDelay","updateContentMutationObserver","destroyContentMutationObserver","prevDirectionIsRTL","hostSelector","viewportSelector","baseStyleChangingAttrs","_target","_host","_scrollOffsetElement","_content","_isBody","_viewportHasClass","_viewportAddRemoveClass","_removeScrollObscuringStyles","getDirectionIsRTL","state","_heightIntrinsic","scrollbarsHidingPlugin","viewportIsTargetBody","noClipping","isArranged","scrollOffset","revertScrollObscuringStyles","revertMeasuring","redoViewportArrange","viewportScroll","fractional","updateContentSizeCache","onObserversUpdatedDebounced","prev","prevObj","currObj","setDirection","updateHints","newDirectionIsRTL","_directionChanged","onTrinsicChanged","heightIntrinsicCache","_heightIntrinsicChanged","exclusiveSizeChange","updateFn","onContentMutation","contentChangedThroughEvent","_updateContentSizeCac","_contentMutation","onHostMutation","_hostMutation","constructTrinsicObserver","updateTrinsicObserver","constructSizeObserver","_createDOMObserver","constructHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","onWindowResizeDebounced","_updateContentSizeCac2","destroySizeObserver","destroyTrinsicObserver","destroyHostMutationObserver","removeResizeListener","_scrollbarSizeChanged","_takeRecords","_force","_checkOption2","_checkOption3","attributesChanged","_checkOption4","elementEventsChanged","_checkOption5","debounceValue","debounceChanged","contentMutationObserverChanged","ignoreMutationFromOptions","_createDOMObserver2","ignore","construct","maxWait","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","createScrollbarsSetupElements","scrollbarsSetupEvents","cssCustomPropViewportPercent","cssCustomPropScrollPercent","cssCustomPropScrollDirection","defaultInitScrollbars","defaultInitScrollbarsSlot","_targetIsElm","scrollbarsInit","initScrollbarsSlot","horizontalScrollbars","verticalScrollbars","evaluatedScrollbarSlot","generalDynamicInitializationElement","initScrollTimeline","axis","timeline","_addScrollPercentAnimation","structure","_structure$_scrollbar","scrollPercentAnimation","_scrollbar","animate","scrollTimeline","getViewportPercent","_overflowAmount","_overflowEdge","getAxisValue","axisViewportSize","axisOverflowAmount","scrollbarStructureAddRemoveClass","scrollbarStructures","action","scrollbarStructure","scrollbarStyle","_elmStyle","scrollbarsAddRemoveClass","onlyHorizontal","singleAxis","runHorizontal","runVertical","refreshScrollbarsHandleLength","viewportPercent","createScrollbarStyleFn","axisViewportPercent","refreshScrollbarsHandleOffset","_scrollCoordinates","scrollPercent","axisScrollPercent","_ref4","refreshScrollbarsScrollCoordinates","defaultDirectionScroll","axisIsDefaultDirectionScrollCoordinates","_ref5","refreshScrollbarsScrollbarOffset","isDefaultDirectionScroll","styleScrollbarPosition","getTranslateValue","axisIsDefaultCoordinates","px","transform","generateScrollbarDOM","xyKey","scrollbarClassName","scrollbar","track","handle","_track","_handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","appendElements","_refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","_refreshScrollbarsScrollCoordinates","_refreshScrollbarsScrollbarOffset","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_style","_vertical","createScrollbarsSetupEvents","scrollbarHandlePointerInteraction","_documentElm","wheelTimeout","clearWheelTimeout","_selfClearTimeout2","scrollSnapScrollTransitionTimeout","clearScrollSnapScrollTransitionTimeout","scrollOffsetElementScrollBy","coordinates","scrollBy","behavior","createInteractiveScrollEvents","releasePointerCaptureEvents","clientXYKey","widthHeightKey","leftTopKey","whKey","createRelativeHandleMove","mouseDownScroll","invertedScale","deltaMovement","_scrollElementTo","handleTrackDiff","scrollDeltaPercent","scrollDelta","pointerdownCleanupFns","pointerDownEvent","isDragScroll","pointerCaptureElement","scrollbarOptions","dragClickScrollOption","button","isPrimary","pointerType","continuePointerDown","instantClickScroll","shiftKey","getHandleRect","getTrackRect","getHandleOffset","handleRect","trackRect","axisScale","pointerDownOffset","handleCenter","relativeTrackPointerOffset","startOffset","releasePointerCapture","pointerUpEvent","pointerupCleanupFns","pointerId","nonAnimatedScroll","pointerMoveEvent","withoutSnapScrollOffset","withSnapScrollOffset","snapScrollDiff","setPointerCapture","animateClickScroll","stopClickScrollAnimation","wheelScrollBy","focusedElement","wheelEvent","deltaX","deltaY","deltaMode","createScrollbarsSetup","mouseInHost","autoHideIsMove","autoHideIsLeave","autoHideIsNever","prevTheme","instanceAutoHideSuspendScrollDestroyFn","instanceAutoHideDelay","isHoverablePointerType","requestScrollAnimationFrame","cancelScrollAnimationFrame","autoHideInstantInteractionTimeout","clearAutoHideInstantInteractionTimeout","_selfClearTimeout3","autoHideSuspendTimeout","clearAutoHideSuspendTimeout","_selfClearTimeout4","auotHideTimeout","clearAutoHideTimeout","_createScrollbarsSetu","manageScrollbarsAutoHideInstantInteraction","_scrollEventElement","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","manageAutoHideSuspension","onHostMouseEnter","_observersUpdateHints","_structureUpdateHints","_overflowEdgeChanged","_overflowAmountChanged","_overflowStyleChanged","_scrollCoordinatesChanged","_hasOverflow","themeChanged","visibilityChanged","autoHideChanged","_checkOption6","autoHideSuspendChanged","_checkOption7","_checkOption8","dragScrollChanged","_checkOption9","clickScrollChanged","_checkOption10","overflowChanged","trulyAppeared","updateScrollbars","updateVisibility","setScrollbarVisibility","isVisible","xVisible","yVisible","hasCorner","createStructureSetupElements","defaultInitElements","defaultPaddingInitialization","defaultViewportInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","initElements","paddingInitialization","viewportInitialization","contentInitialization","targetElement","ownerDocument","docElement","documentElement","getDocumentWindow","defaultView","generalStaticInitializationElement","createNewDiv","generateViewportElement","generateContentElement","elementHasOverflow","offsetSize","scrollSize","overflowX","overflowY","possibleViewportElement","viewportIsTarget","possibleContentElement","viewportIsContent","viewportElement","hostElement","paddingElement","contentElement","generatedElements","elementIsGenerated","originalNonBodyScrollOffsetElement","scrollOffsetElement","scrollEventElement","evaluatedTargetObj","_padding","_originalScrollOffsetElement","_windowElm","viewportAttributeClassName","targetContents","contentSlot","docWnd","initActiveElm","unwrap","prepareWrapUnwrapFocus","tabIndexStr","originalViewportTabIndex","undoInitWrapUndwrapFocus","destroyActiveElm","viewportIsGenerated","destroyFocusElement","undoDestroyWrapUndwrapFocus","createTrinsicUpdateSegment","_observersState","createPaddingUpdateSegment","updatePaddingCache","currentPaddingCache","_currentPaddingCache","paddingChanged","paddingAbsoluteChanged","contentMutation","_updatePaddingCache","paddingStyleChanged","_paddingStyle","_viewportStyle","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","viewportStyle","_paddingAbsolute","_paddingStyleChanged","createOverflowUpdateSegment","max0","flowDirectionCanBeNonDefaultMap","display","direction","directionStyle","flexDirection","flexDirectionStyle","endsWith","writingMode","writingModeStyle","flowDirectionStyleArr","whCacheOptions","partialXYOptions","setMeasuringMode","active","getMeasuredScrollCoordinates","flowDirectionStyles","flowDirectionCanBeNonDefault","some","styleName","styleValue","originalScrollOffset","removeNoContent","removeScrollBlock","scrollEventScrollOffset","isTrusted","tmp","getOverflowAmount","viewportClientSize","tollerance","updateSizeFraction","getCurrentSizeFraction","_createCache2","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","_createCache3","updateOverflowAmountCache","getCurrentOverflowAmountCache","_createCache4","updateHasOverflowCache","_createCache5","updateOverflowEdge","getCurrentOverflowEdgeCache","_createCache6","updateOverflowStyleCache","_createCache7","currVal","newValu","updateFlowDirectionStyles","_createCache8","updateMeasuredScrollCoordinates","getCurrentMeasuredScrollCoordinates","createViewportOverflowStyleClassName","prefix","setViewportOverflowStyle","viewportOverflowStyle","createAllOverflowStyleClassNames","allOverflowStyleClassNames","scrollbarsHidingPluginViewportArrangement","overflowXVisible","overflowYVisible","viewportChanged","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","_sizeFractionCache","_viewportScrollSizeCa","windowInnerSize","overflowAmountScrollSize","overflowAmountClientSize","_overflowEdgeCache","overflowEdge","overflowEdgeChanged","_overflowAmuntCache","overflowAmountChanged","_viewportScrollSizeCa2","viewportScrollSizeChanged","_sizeFractionCache2","sizeFractionChanged","_updateHasOverflowCac","hasOverflowChanged","removeClipping","adjustViewportStyle","_updateOverflowStyleC","overflowStyleChanged","_updateFlowDirectionS","flowDirectionStylesChanged","adjustMeasuredScrollCoordinates","_ref6","scrollCoordinates","scrollCoordinatesChanged","_scrolled","createStructureSetup","_createStructureSetup","appendStructureElements","canceled","updateSegments","updateInfo","adjustScrollOffset","updateSegment","createSetups","isDestroyed","onUpdated","cacheAndOptionsInitialized","structureSetupCreate","structureSetupUpdate","structureSetupCanceled","_createObserversSetup","observersUpdateHints","observersSetupCreate","observersSetupUpdate","scrollbarsSetupCreate","scrollbarsSetupUpdate","scrollbarsSetupElements","updateHintsAreTruthy","hints","observerUpdateHints","rawChangedOptions","_changedOptions","rawForce","_cloneScrollbar","baseUpdateInfoObj","observersHints","structureHints","truthyObserversHints","truthyStructureHints","initialScroll","_observersSetupState","_structureSetupState","_structureSetupElements","_scrollbarsSetupElements","OverlayScrollbars","eventListeners","targetIsElement","instanceTarget","potentialInstance","instancePluginModuleInstances","newOptionsWithoutUndefined","pluginValidate","currentOptions","addPluginEvent","removePluginEvents","triggerPluginEvent","_createEventListenerH2","addInstanceEvent","removeInstanceEvents","triggerInstanceEvent","_createSetups","sizeChanged","directionChanged","hostMutation","setupsConstruct","setupsUpdate","setupsState","setupsElements","setupsCanceled","pure","base","on","off","_setupsState","directionRTL","_setupsElements$_stru","_setupsElements$_scro","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","translatedStructure","scrollbarHorizontal","scrollbarVertical","plugins","isArr","pluginsToAdd","valid","hasElmsFn","_getEnvironment2","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","setDefaultInitialization","setDefaultOptions"],"mappings":"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","x_google_ignoreList":[32]}